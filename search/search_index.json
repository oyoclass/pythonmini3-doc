{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's Python? Quote from Python official website : Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. About PythonMini PythonMini is an online python interpreter to help you write python in browser, without installing it to your computer. It implements a subset of Python 2, plus extra libraries: processing : Graphical library webaudio : Audio library gesture : Gesture detecting library impress : Slides/Presentation library firebase : Firebase library, can be used as database Quick Start Copy following example code to PythonMini editor then click \"Run\": Say hello print hello Doing math print 123 * 456 # calculate 123 times 456 print 180 / 12 # calculate 180 divided by 12 Ask a question answer = raw_input( What's your name? ) print hello , answer Draw a circle from turtle import Turtle t = Turtle() t.circle(40) # a circle with radius 40 Make a drawing-board from processing import * def setup(): size(500, 400) background(255, 255, 255) def draw(): if mouse.pressed: line(mouse.x, mouse.y, mouse.px, mouse.py) run() Draw a 3D rotating box from processing import * rotating = 0.01 def setup(): size(400, 400, P3D) def draw(): global rotating background(0, 0, 0) translate(200, 100, 0) rotateY(rotating) rotating += 0.01 if rotating = PI: rotating = 0.01 fill(255, 0, 0) box(40) run() There are a lot more you can do with PythonMini, for more information and examples, check the documentation on the left. Beyond PythonMini PythonMini is meant as an introduction to the Python programming language. Everything you see in this documentation represents the full capability of the PythonMini editor. It is designed to allow you to run python in the browser, making storage and sharing of your work easier. Much more is possible with python than can be done with Python Mini alone. Examples include accessing local data, interacting with the operating system, or installing and using third-party libraries. To access the full capabilities of Python, download and install python onto your machine. Also included below are the links to the official python website and its documentation. Python.org Download Python Python Official Documentation Feedback If you find any error about this PythonMini documentation, please help us improve it, mail us at feedback@oyoclass.com Credits Skulpt Python Official Documentation Processingjs Processing.py Gesture.js Impress.js Firebase","title":"Home"},{"location":"#whats-python","text":"Quote from Python official website : Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.","title":"What's Python?"},{"location":"#about-pythonmini","text":"PythonMini is an online python interpreter to help you write python in browser, without installing it to your computer. It implements a subset of Python 2, plus extra libraries: processing : Graphical library webaudio : Audio library gesture : Gesture detecting library impress : Slides/Presentation library firebase : Firebase library, can be used as database","title":"About PythonMini"},{"location":"#quick-start","text":"Copy following example code to PythonMini editor then click \"Run\": Say hello print hello Doing math print 123 * 456 # calculate 123 times 456 print 180 / 12 # calculate 180 divided by 12 Ask a question answer = raw_input( What's your name? ) print hello , answer Draw a circle from turtle import Turtle t = Turtle() t.circle(40) # a circle with radius 40 Make a drawing-board from processing import * def setup(): size(500, 400) background(255, 255, 255) def draw(): if mouse.pressed: line(mouse.x, mouse.y, mouse.px, mouse.py) run() Draw a 3D rotating box from processing import * rotating = 0.01 def setup(): size(400, 400, P3D) def draw(): global rotating background(0, 0, 0) translate(200, 100, 0) rotateY(rotating) rotating += 0.01 if rotating = PI: rotating = 0.01 fill(255, 0, 0) box(40) run() There are a lot more you can do with PythonMini, for more information and examples, check the documentation on the left.","title":"Quick Start"},{"location":"#beyond-pythonmini","text":"PythonMini is meant as an introduction to the Python programming language. Everything you see in this documentation represents the full capability of the PythonMini editor. It is designed to allow you to run python in the browser, making storage and sharing of your work easier. Much more is possible with python than can be done with Python Mini alone. Examples include accessing local data, interacting with the operating system, or installing and using third-party libraries. To access the full capabilities of Python, download and install python onto your machine. Also included below are the links to the official python website and its documentation. Python.org Download Python Python Official Documentation","title":"Beyond PythonMini"},{"location":"#feedback","text":"If you find any error about this PythonMini documentation, please help us improve it, mail us at feedback@oyoclass.com","title":"Feedback"},{"location":"#credits","text":"Skulpt Python Official Documentation Processingjs Processing.py Gesture.js Impress.js Firebase","title":"Credits"},{"location":"core/boolean/","text":"Boolean Booleans are used to show the logical truth values True and False . Constants True False The following values are considered False : None, False, 0, 0L, 0.0, '', (), [], {}, set([]) Convert value to boolean bool(x) : convert x to True or False Logical operations and : x and y, if x if false then x, else y or : x or y, if x is false, then y, else x not : not x, if x is false, then True, else False Example print True # True print 1 2 # True print 2 3 # False print 3 = 3 # True print 1 2 and 2 3 # False print 1 2 or 2 3 # True print not 1 2 # False print bool(0) # False print bool([]) # False print bool(3) # True Reference standard types, docs.python.org","title":"Boolean"},{"location":"core/boolean/#boolean","text":"Booleans are used to show the logical truth values True and False .","title":"Boolean"},{"location":"core/boolean/#constants","text":"True False The following values are considered False : None, False, 0, 0L, 0.0, '', (), [], {}, set([])","title":"Constants"},{"location":"core/boolean/#convert-value-to-boolean","text":"bool(x) : convert x to True or False","title":"Convert value to boolean"},{"location":"core/boolean/#logical-operations","text":"and : x and y, if x if false then x, else y or : x or y, if x is false, then y, else x not : not x, if x is false, then True, else False","title":"Logical operations"},{"location":"core/boolean/#example","text":"print True # True print 1 2 # True print 2 3 # False print 3 = 3 # True print 1 2 and 2 3 # False print 1 2 or 2 3 # True print not 1 2 # False print bool(0) # False print bool([]) # False print bool(3) # True","title":"Example"},{"location":"core/boolean/#reference","text":"standard types, docs.python.org","title":"Reference"},{"location":"core/comparison/","text":"Comparison Comparison operations are supported by all objects. They all have the same priority (which is higher than that of the Boolean operations). Operations : strictly less than = : less than or equal : strictly greater than = : greater than or equal == : equal != : not equal is : object identity is not : negated object identity Example print 2 != 3 # True print 5 = 4 # True print 2 is 2 # True print 300 is 300 # True num = 350 print num is not 350 # False Reference Comparisons - docs.python.org","title":"Comparison"},{"location":"core/comparison/#comparison","text":"Comparison operations are supported by all objects. They all have the same priority (which is higher than that of the Boolean operations).","title":"Comparison"},{"location":"core/comparison/#operations","text":": strictly less than = : less than or equal : strictly greater than = : greater than or equal == : equal != : not equal is : object identity is not : negated object identity","title":"Operations"},{"location":"core/comparison/#example","text":"print 2 != 3 # True print 5 = 4 # True print 2 is 2 # True print 300 is 300 # True num = 350 print num is not 350 # False","title":"Example"},{"location":"core/comparison/#reference","text":"Comparisons - docs.python.org","title":"Reference"},{"location":"core/dictionary/","text":"Dictionary Dictionaries are sometimes found in other languages as \u201cassociative memories\u201d or \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type. It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary. Functions dict.clear() : Remove all items from the dictionary. dict.get(key[, default]) : Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError. dict.has_key(key) : Test for the presence of key in the dictionary. dict.items() : Return a copy of the dictionary\u2019s list of (key, value) pairs. dict.keys() : Return a copy of the dictionary\u2019s list of keys. dict.pop(key[, default]) : If key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a KeyError is raised. dict.setdefault(key[, default]) : If key is in the dictionary, return its value. If not, insert key with a value of default and return default. default defaults to None. dict.update([other]) : Update the dictionary with the key/value pairs from other, overwriting existing keys. Return None. dict.values() : Return a copy of the dictionary\u2019s list of values. Example a = { name : Bo , age : 20} print a.has_key( name ) # True print a.keys() # ['name', 'age'] print a.values() # ['Bo', 20] a.setdefault( gender , m ) print a # {'name': 'Bo', 'age': 20, 'gender': 'm'} a.update({ city : Stony Brook }) print a # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'} Reference Data structure: dictionary - docs.python.org Mapping Type - Dict","title":"Dictionary"},{"location":"core/dictionary/#dictionary","text":"Dictionaries are sometimes found in other languages as \u201cassociative memories\u201d or \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type. It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary.","title":"Dictionary"},{"location":"core/dictionary/#functions","text":"dict.clear() : Remove all items from the dictionary. dict.get(key[, default]) : Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError. dict.has_key(key) : Test for the presence of key in the dictionary. dict.items() : Return a copy of the dictionary\u2019s list of (key, value) pairs. dict.keys() : Return a copy of the dictionary\u2019s list of keys. dict.pop(key[, default]) : If key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a KeyError is raised. dict.setdefault(key[, default]) : If key is in the dictionary, return its value. If not, insert key with a value of default and return default. default defaults to None. dict.update([other]) : Update the dictionary with the key/value pairs from other, overwriting existing keys. Return None. dict.values() : Return a copy of the dictionary\u2019s list of values.","title":"Functions"},{"location":"core/dictionary/#example","text":"a = { name : Bo , age : 20} print a.has_key( name ) # True print a.keys() # ['name', 'age'] print a.values() # ['Bo', 20] a.setdefault( gender , m ) print a # {'name': 'Bo', 'age': 20, 'gender': 'm'} a.update({ city : Stony Brook }) print a # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'}","title":"Example"},{"location":"core/dictionary/#reference","text":"Data structure: dictionary - docs.python.org Mapping Type - Dict","title":"Reference"},{"location":"core/function/","text":"Functions Built-in functions abs all any bin bool chr dict dir divmod enumerate filter float hex int isinstance issubclass len list long map max min oct ord pow print range raw_input reduce repr reversed round set slice sorted str sum tuple xrange zip For how to use above functions, check built-in functions on Python official documentation . Example print bin(3) # 0b11 print hex(255) # 0xff print abs(-5) # 5 print pow(3, 2) # 9 print round(3.5) # 4.0 print round(3.2) # 3.0 print oct(8) # 010 print ord('A') # 65 print chr(97) # a a = [1,4,5,2,3] print sorted(a) # [1, 2, 3, 4, 5] User-defined functions You can define your own function by using def . Example: def my_add(a, b): c = a + b return c print my_add(1, 2) # 3 Reference Built-in function - docs.python.org","title":"Function"},{"location":"core/function/#functions","text":"","title":"Functions"},{"location":"core/function/#built-in-functions","text":"abs all any bin bool chr dict dir divmod enumerate filter float hex int isinstance issubclass len list long map max min oct ord pow print range raw_input reduce repr reversed round set slice sorted str sum tuple xrange zip For how to use above functions, check built-in functions on Python official documentation .","title":"Built-in functions"},{"location":"core/function/#example","text":"print bin(3) # 0b11 print hex(255) # 0xff print abs(-5) # 5 print pow(3, 2) # 9 print round(3.5) # 4.0 print round(3.2) # 3.0 print oct(8) # 010 print ord('A') # 65 print chr(97) # a a = [1,4,5,2,3] print sorted(a) # [1, 2, 3, 4, 5]","title":"Example"},{"location":"core/function/#user-defined-functions","text":"You can define your own function by using def . Example: def my_add(a, b): c = a + b return c print my_add(1, 2) # 3","title":"User-defined functions"},{"location":"core/function/#reference","text":"Built-in function - docs.python.org","title":"Reference"},{"location":"core/list/","text":"List List is used to group together values, can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type. List's index starts from 0, and you can visit last element using index -1: a = [1, 5, 2, 3] print a[0] # 1 print a[1] # 5 print a[-1] # 3 print a[1:3] # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2] Change element at a index: a = [1, 5, 2, 3] a[1] = 7 print a # [1, 7, 2, 3] To check if one element in a list, you can use in : a = [1, 5, 2, 3] print 5 in a # True Use function len to get length (how many elements) of a list: a = [1, 5, 2, 3] print len(a) # 4 Functions list.append(x) list.count(x) list.extend(L) list.index(x) list.insert(i, x) list.pop([i]) list.remove(x) list.reverse() list.sort(cmp=None, key=None, reverse=False) For how to use those functions, check lists method on Python official documentation Example a = [1, 5, 2, 3] a.append(6) print a # [1, 5, 2, 3, 6] print a.count(5) # 1 a.remove(2) print a # [1, 5, 3, 6] a.reverse() print a # [6, 3, 5, 1] a.sort() print a # [1, 3, 5, 6] Tuple Tuple is similar with list, the main difference is list is mutable and tuple is immutable. Once you defined a tuple with parentheses () , you can not change its element. b = (1, 5, 2, 3) b.append(6) # this will give an error, since b is a tuple and immutable Conversion between tuple and list Though a tuple can not be changed, you can convert it to list, make some changes, then convert it back to tuple. You can do this with tuple and list function. b = (1, 5, 2, 3) b = list(b) # Convert tuple to list b.append(6) # Change list - append one more element b = tuple(b) # Convert list to tuple print b # (1, 5, 2, 3, 6) Reference Introduction of List - docs.python.org More on Lists - docs.python.org","title":"List & Tuple"},{"location":"core/list/#list","text":"List is used to group together values, can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type. List's index starts from 0, and you can visit last element using index -1: a = [1, 5, 2, 3] print a[0] # 1 print a[1] # 5 print a[-1] # 3 print a[1:3] # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2] Change element at a index: a = [1, 5, 2, 3] a[1] = 7 print a # [1, 7, 2, 3] To check if one element in a list, you can use in : a = [1, 5, 2, 3] print 5 in a # True Use function len to get length (how many elements) of a list: a = [1, 5, 2, 3] print len(a) # 4","title":"List"},{"location":"core/list/#functions","text":"list.append(x) list.count(x) list.extend(L) list.index(x) list.insert(i, x) list.pop([i]) list.remove(x) list.reverse() list.sort(cmp=None, key=None, reverse=False) For how to use those functions, check lists method on Python official documentation","title":"Functions"},{"location":"core/list/#example","text":"a = [1, 5, 2, 3] a.append(6) print a # [1, 5, 2, 3, 6] print a.count(5) # 1 a.remove(2) print a # [1, 5, 3, 6] a.reverse() print a # [6, 3, 5, 1] a.sort() print a # [1, 3, 5, 6]","title":"Example"},{"location":"core/list/#tuple","text":"Tuple is similar with list, the main difference is list is mutable and tuple is immutable. Once you defined a tuple with parentheses () , you can not change its element. b = (1, 5, 2, 3) b.append(6) # this will give an error, since b is a tuple and immutable","title":"Tuple"},{"location":"core/list/#conversion-between-tuple-and-list","text":"Though a tuple can not be changed, you can convert it to list, make some changes, then convert it back to tuple. You can do this with tuple and list function. b = (1, 5, 2, 3) b = list(b) # Convert tuple to list b.append(6) # Change list - append one more element b = tuple(b) # Convert list to tuple print b # (1, 5, 2, 3, 6)","title":"Conversion between tuple and list"},{"location":"core/list/#reference","text":"Introduction of List - docs.python.org More on Lists - docs.python.org","title":"Reference"},{"location":"core/none/","text":"None None is frequently used to represent the absence of a value, as when default arguments are not passed to a function. Example a = None print a # None print a is None # True Reference None - docs.python.org","title":"None"},{"location":"core/none/#none","text":"None is frequently used to represent the absence of a value, as when default arguments are not passed to a function.","title":"None"},{"location":"core/none/#example","text":"a = None print a # None print a is None # True","title":"Example"},{"location":"core/none/#reference","text":"None - docs.python.org","title":"Reference"},{"location":"core/number/","text":"Number You can use integer and floating-point numbers, example: a = 1 b = 2 print a + b # 3 print b * 3 # 6 print 1 + 2 * 3 # 7 print (1 + 2) * 3 # 9 c = 1.5 print c * 2 # 3.0 print 1 / 3 # 0 print 1.0 / 3 # 0.333333333333 Conversion between integer and floating-point number: int(x) : convert x to integer long(x) : convert x to long integer float(x) : convert x to floating-point number Example: print int(12.3) # 12 print int( 234 ) # 234 print long(5.6) # 5 print float(12) # 12.0","title":"Number"},{"location":"core/number/#number","text":"You can use integer and floating-point numbers, example: a = 1 b = 2 print a + b # 3 print b * 3 # 6 print 1 + 2 * 3 # 7 print (1 + 2) * 3 # 9 c = 1.5 print c * 2 # 3.0 print 1 / 3 # 0 print 1.0 / 3 # 0.333333333333 Conversion between integer and floating-point number: int(x) : convert x to integer long(x) : convert x to long integer float(x) : convert x to floating-point number Example: print int(12.3) # 12 print int( 234 ) # 234 print long(5.6) # 5 print float(12) # 12.0","title":"Number"},{"location":"core/set/","text":"Set A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. You can use set() to get a set, here is a quick example: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] fruit = set(basket) print fruit # set(['apple', 'orange', 'pear', 'banana']) Functions set.add(elem) : Add element elem to the set. set.copy() : Return a new set with a shallow copy of s. set.difference(other) : Return a new set with elements in the set that are not in the others. set.difference_update(other) : Update the set, removing elements found in others. set.discard(elem) : Remove element elem from the set if it is present. set.intersection(other) : Return a new set with elements common to the set and all others. set.intersection_update(other) : Update the set, keeping only elements found in it and all others. set.isdisjoint(other) : Return True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. set.issubset(other) : Test whether every element in the set is in other. set.issuperset(other) : Test whether every element in other is in the set. set.pop() : Remove and return an arbitrary element from the set. set.remove(elem) : Remove element elem from the set. set.symmetric_difference(other) : Return a new set with elements in either the set or other but not both. set.symmetric_difference_update(other) : Update the set, keeping only elements found in either set, but not in both. set.union(other) : Return a new set with elements from the set and all others. set.update(other) : Update the set, adding elements from all others. *Notice: The official Python support using mathematical operator with sets, for example, if we have two sets a and b, a - b is the same as a.difference(b) , however, PythonMini doesn't support those operators at this moment. Example a = set() a.add(1) a.add(2) a.add(1) print a # set([1, 2]) print len(a) # 2 b = set([2,2,3]) print b # set([2, 3]) print a.intersection(b) # set([2]) print a.union(b) # set([1, 2, 3]) c = set([3]) print b.issuperset(c) # True Reference Sets - docs.python.org Set - docs.python.org","title":"Set"},{"location":"core/set/#set","text":"A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. You can use set() to get a set, here is a quick example: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] fruit = set(basket) print fruit # set(['apple', 'orange', 'pear', 'banana'])","title":"Set"},{"location":"core/set/#functions","text":"set.add(elem) : Add element elem to the set. set.copy() : Return a new set with a shallow copy of s. set.difference(other) : Return a new set with elements in the set that are not in the others. set.difference_update(other) : Update the set, removing elements found in others. set.discard(elem) : Remove element elem from the set if it is present. set.intersection(other) : Return a new set with elements common to the set and all others. set.intersection_update(other) : Update the set, keeping only elements found in it and all others. set.isdisjoint(other) : Return True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. set.issubset(other) : Test whether every element in the set is in other. set.issuperset(other) : Test whether every element in other is in the set. set.pop() : Remove and return an arbitrary element from the set. set.remove(elem) : Remove element elem from the set. set.symmetric_difference(other) : Return a new set with elements in either the set or other but not both. set.symmetric_difference_update(other) : Update the set, keeping only elements found in either set, but not in both. set.union(other) : Return a new set with elements from the set and all others. set.update(other) : Update the set, adding elements from all others. *Notice: The official Python support using mathematical operator with sets, for example, if we have two sets a and b, a - b is the same as a.difference(b) , however, PythonMini doesn't support those operators at this moment.","title":"Functions"},{"location":"core/set/#example","text":"a = set() a.add(1) a.add(2) a.add(1) print a # set([1, 2]) print len(a) # 2 b = set([2,2,3]) print b # set([2, 3]) print a.intersection(b) # set([2]) print a.union(b) # set([1, 2, 3]) c = set([3]) print b.issuperset(c) # True","title":"Example"},{"location":"core/set/#reference","text":"Sets - docs.python.org Set - docs.python.org","title":"Reference"},{"location":"core/stdoutin/","text":"Standard output and input Standard output The most common way to output something is using print function: print 2 * 3 print hello arr = [1, 2, 3, 4] print arr Output: 6 hello [1, 2, 3, 4] or you can use sys.stdout.write : from sys import stdout arr = [1, 2, 3, 4] stdout.write( hello ) stdout.write(arr) Output: hello 1,2,3,4 Standard input To get user input, you can use raw_input function: name = raw_input( What's your name? ) print hello , name What you get from raw_input will always be string, even it looks like a number, for example: num = raw_input( Give me a number ) print num # 12 print num * 2 # 1212 # now convert it to number num = int(num) print num * 2 # 24 You can also read user's input by using sys.stdin.read or sys.stdin.readline : from sys import stdin name = stdin.readline() print name # Only read 3 characters name = stdin.readline(3) print name","title":"Standard output & input"},{"location":"core/stdoutin/#standard-output-and-input","text":"","title":"Standard output and input"},{"location":"core/stdoutin/#standard-output","text":"The most common way to output something is using print function: print 2 * 3 print hello arr = [1, 2, 3, 4] print arr Output: 6 hello [1, 2, 3, 4] or you can use sys.stdout.write : from sys import stdout arr = [1, 2, 3, 4] stdout.write( hello ) stdout.write(arr) Output: hello 1,2,3,4","title":"Standard output"},{"location":"core/stdoutin/#standard-input","text":"To get user input, you can use raw_input function: name = raw_input( What's your name? ) print hello , name What you get from raw_input will always be string, even it looks like a number, for example: num = raw_input( Give me a number ) print num # 12 print num * 2 # 1212 # now convert it to number num = int(num) print num * 2 # 24 You can also read user's input by using sys.stdin.read or sys.stdin.readline : from sys import stdin name = stdin.readline() print name # Only read 3 characters name = stdin.readline(3) print name","title":"Standard input"},{"location":"core/string/","text":"String You can define a string using two single-quote or two double-quote, or two triple-quote, for example s = \"hello\" , once you have a string, below are listed the string methods you can apply to. Functions str.capitalize() str.center(width[, fillchar]) str.count(sub[, start[, end]]) str.endswith(suffix) str.expandtabs([tabsize]) str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.index(sub[, start[, end]]) str.isalnum() str.isalpha() str.isdigit() str.islower() str.isnumeric() str.isspace() str.istitle() str.isupper() str.join(iterable) str.ljust(width[, fillchar]) str.lower() str.lstrip([chars]) str.partition(seq) str.replace(old, new[, count]) str.rfind(sub[, start[, end]]) str.rindex(sub[, start[, end]]) str.rjust(width[, fillchar]) str.rpartition(seq) str.rstrip([chars]) str.split([sep[, maxsplit]]) str.splitlines([keepends]) str.startswith(prefix[, start[, end]]) str.strip([chars]) str.swapcase() str.title() str.upper() str.zfill(width) For how to use above functions, check String Methods on Python official documentation . Example a = hello world print a.capitalize() # Hello world print a.upper() # HELLO WORLD print a.find( world ) # 6 print a.split() # ['hello', 'world'] print a.isalnum() # False b = hello {0} {1} print b.format( Albert , Einstein ) # hello Albert Einstein Reference String methods - docs.python.org","title":"String"},{"location":"core/string/#string","text":"You can define a string using two single-quote or two double-quote, or two triple-quote, for example s = \"hello\" , once you have a string, below are listed the string methods you can apply to.","title":"String"},{"location":"core/string/#functions","text":"str.capitalize() str.center(width[, fillchar]) str.count(sub[, start[, end]]) str.endswith(suffix) str.expandtabs([tabsize]) str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.index(sub[, start[, end]]) str.isalnum() str.isalpha() str.isdigit() str.islower() str.isnumeric() str.isspace() str.istitle() str.isupper() str.join(iterable) str.ljust(width[, fillchar]) str.lower() str.lstrip([chars]) str.partition(seq) str.replace(old, new[, count]) str.rfind(sub[, start[, end]]) str.rindex(sub[, start[, end]]) str.rjust(width[, fillchar]) str.rpartition(seq) str.rstrip([chars]) str.split([sep[, maxsplit]]) str.splitlines([keepends]) str.startswith(prefix[, start[, end]]) str.strip([chars]) str.swapcase() str.title() str.upper() str.zfill(width) For how to use above functions, check String Methods on Python official documentation .","title":"Functions"},{"location":"core/string/#example","text":"a = hello world print a.capitalize() # Hello world print a.upper() # HELLO WORLD print a.find( world ) # 6 print a.split() # ['hello', 'world'] print a.isalnum() # False b = hello {0} {1} print b.format( Albert , Einstein ) # hello Albert Einstein","title":"Example"},{"location":"core/string/#reference","text":"String methods - docs.python.org","title":"Reference"},{"location":"firebase/firebase/","text":"Firebase The firebase library can be used to add real-time database functionality in your Python applications. This library depends on creating a Firebase app at Google Firebase . The Firebase database allows you to store, retrieve, and update data. Firebase Functions firebase.loadFirebase(api_key, auth_domain, database_url) : Creates a firebase database connection to your existing Firebase app. It returns the Firebase object that you will use for all the database functionality (the class is explained below). Pass the API key and the app name twice as strings. You will continue to use this db object to work with the database. db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') Firebase Class Save Data db.set(url, data) : Write or replace data to a URL path, such as users/star_count . For example, db.set('users/star_count', 10) . db.push(url, data) : Writes data to URL path at a new unique child. For example, db.push('users/', {'username': 'Bob'}) . db.remove(url) : Removes data at the given URL path. For example, db.remove('users/') . db.update(url, data) : Writes or replaces data to the URL path. For example, db.update('users/star_count', 15) . Retrieve Data db.child_added(url, fn, once=False) : Retrieve lists of items and listen for additions to a list of items to be passed to the callback function. By default, child_added continues to listen for new events, but can retrieve once by passing True to the third parameter once. For example, db.child_added('users/', printUsers, True) . db.child_removed(url, fn, once=False) : Listen for items being removed from a list to be passed to the callback function. By default, child_removed continues to listen for new events, but can retrieve once by passing True to the third parameter once. For example, db.child_removed('users/', printRemovedUsers, True) . db.child_updated(url, fn, once=False) : Listen for changes to the items in a list to be passed to the callback function. By default, child_updated continues to listen for new events, but can retrieve once by passing True to the third parameter once. For example, db.child_updated('users/', printUpdatedUsers, True) . db.value(url, fn, once=False) : Read and listen for changes to the entire contents of a URL path to be passed to the callback function. By default, value continues to listen for new events, but can retrieve once by passing True to the third parameter once. When once is set to True db.value can be used with db.set to set and read data at a URL path. For example, db.value('users/', printValues, True) . Setup Head to Firebase setup . Structured Data Head to Structured Data . Examples Saving/Updating/Removing Data Example Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . Firebase import: Declare and initialize database variable(db) with the loadFirebase() method. firebase.loadFirebase(apiKey, auth_domain, database_url) @param apiKey: string @param auth_domain: string @param database_url: string import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') db.set(url, data) @param url: String @param data: Python data types and data structures # data can be numbers db.set('users/star_count', 10) # data can be strings db.set('users/to_be_deleted', '10') # data can be floats db.set('users/pi', 3.15) # data can be Python dictionaries db.set('users/spaceship', { userid : uid001 , health : 95, damage : 8, coordinates : [25, 99] }) # data can be Python lists db.set('users/my_array', [0, 1, 2, 3, 4, 5]) db.push(url, data) @param url: String @param data: Python data types and data structures # data can be integers/floats/strings db.push('math/', 3.14) # data can be Python dictionaries db.push('users/', {'username': 'Mary'}) db.push('users/', {'username': 'Joe'}) db.push('users/', { 'username': 'Bob', 'email': 'example@email.com', 'age': 22 }) db.remove(url) @param url: String # remove the data at the URL path 'users/to_be_deleted' db.remove('users/to_be_deleted') db.update(url, data) @param url: String @param data: Python data types and data structures # the data at the URL path 'users/star_count' is now the number 3.14 db.update('users/pi', 3.14) Retrieving Data To retrieve data through Firebase you must use a callback function. Callback functions will all receive two parameters. A URL string which is being listened on and a data dictionary. def printAddedUser(url, data): # URL path being listened on print url # relative location of the data from the passed URL path print data['key'] # data located at the URL path and key print data['value'] The data dictionary will have two attributes the 'key' for locating the data on the URL path and the 'value' of that data. ret = { # relative location of the data from the passed URL path key : -KOtqG2aj5ln1bJ2qkav , value : { username : Bob , health : 85, coordinates : [45, 110] } } Retrieving Data Examples On Event Callbacks The following retrieval examples have the once parameter equal to False . As new events occur on the given URL path the callback function will run. Child Added Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printAddedUser(url, data): # When using db.push a unique key will be generated at the passed URL # for the data. key = data['key'] # This key will be used to update the data at that URL path and key. # This change will emit a child_updated event see Child Updated. updateUser(key) print data['value']['username'], has joined. # the child_added method will retrieve every child at the URL path 'users/' db.child_added('users/', printAddedUser) new_user = { 'username': 'Bob', 'profession': 'builder' } modify_user = { 'username': 'Bob', 'profession': 'plumber' } # The value at the path 'users/' + key will be modify_user, not new_user. def updateUser(key): db.update('users/' + key, modify_user) The push method will add a new user to the database. This will trigger a child_added event at 'users/' and fire the printAddedUser method. db.push('users/', new_user) Child Removed Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printRemovedUser(url, data): print data['value']['username'], has left. # The child_removed method will fire when a child at the URL path 'users/' # is removed. db.child_removed('users/', printRemovedUser) The remove method will remove the object at 'users/bob002' from the database. This will trigger a child_removed event at 'users/' and fire the printRemovedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.remove('users/bob002') Child Updated Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printUpdatedUser(url, data): print data['value']['username'], has updated. # The child_updated method will fire when a child at the URL path 'users/' # is updated. db.child_updated('users/', printUpdatedUser) updated_user = { 'username': 'Bob', 'profession': 'plumber' } The update method will update the object at 'users/bob002' from the database. This will trigger a child_updated event at 'users/' and fire the printUpdatedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.update('users/bob002', updated_user) Value Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') This callback function will be passed the all the contents on the path. To print the username from the return data dictionary we must iterate over the returned data[ value ]. def printAllUsers(url, data): # entire path's contents are sent for user in data[ value ]: print data[ value ][user][ username ] + has joined. # The printAllUsers method will fire when any change at the URL path 'users/' # is modified(added, removed, updated). db.value('users/', printAllUsers) new_user = { 'username': 'Bob', 'profession': 'builder' } updated_user = { 'username': 'Bob', 'profession': 'plumber' } The following methods will all trigger the firing of the value method and the return of the entire path's value. Note: That the values must exists at users/bob002 for update and remove methods to work. db.set('users/bob002', new_user) db.update('users/bob002', updated_user) db.remove('users/bob002') Once Event Callbacks The following retrieval examples have the once parameter equal to True . The callback function at the given URL path will run once. Child Added Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printAddedUser(url, data): print data['value']['username'], has joined. # The child_added method will retrieve one child at the URL path 'users/'. db.child_added('users/', printAddedUser, True) new_user = { 'username': 'Bob', 'profession': 'builder' } The push method will add a new user to the database, but this will not trigger the child_added event at 'users/' and fire the printAddedUser method! It has already retrieved a user and will not listen for this push method's child_added event. db.push('users/', new_user) Child Removed Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printRemovedUser(url, data): print data['value']['username'], has left. # The child_removed method will fire when a child at the URL path 'users/' # is removed and not fire again. db.child_removed('users/', printRemovedUser, True) The remove method will remove the object at 'users/bob002' from the database. This will trigger a child_removed event at 'users/' and fire the printRemovedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.remove('users/bob002') # this update will not trigger the child_removed function db.remove('users/mary004') Child Updated Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printUpdatedUser(url, data): print data['value']['username'], has updated. # The child_updated method will fire when a child at the URL path 'users/' # is updated and then will not fire again. db.child_updated('users/', printUpdatedUser, True) bob_updated_user = { 'username': 'Bob', 'profession': 'plumber' } mary_updated_user = { 'username': 'Mary', 'profession': 'doctor' } The update method will update the object at 'users/bob002' from the database. This will trigger a child_updated event at 'users/' and fire the printUpdatedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.update('users/bob002', bob_updated_user) # this update will not trigger the child_updated function db.update('users/mary004', mary_updated_user) Value Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') Try this callback function will be passed the all the contents on the path. To print the username from the return data dictionary we must iterate over the returned data[ value ]. def printAllUsers(url, data): # entire path's contents are sent for user in data[ value ]: print data[ value ][user][ username ] + has joined. # The printAllUsers method will fire only once at the URL path 'users/'. db.value('users/', printAllUsers, True) new_user = { 'username': 'Bob', 'profession': 'builder' } The push method will add a new user to the database, but this will not trigger the value event at 'users/' and fire the printAllUsers method! It has already retrieved the path contents and will not listen for this push method's value event. db.push('users/', new_user) Common Use Cases Set and Retrieve Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . Run this example more than once to fully understand the code! from time import sleep from random import randint import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16l0w', 'fir-docs-demo', 'fir-docs-demo') # initial lives count we want updated lives = 0 Try this callback function will be passed the all the contents on the path. There will need to be a integer value at the URL path 'lives/' for this example to work. def getLives(url, data): global lives lives = data[ value ] With the once parameter set to `True` the getInitialLives method will fire only once at the URL path 'lives/'. We can use this .value() method with .set() method to get and set values. def retrieveFromDB(): db.value('lives/', getLives, True) The set method will set the new value for lives in the database, but this will not trigger the value event at 'lives/' again until we want to get the value again. def sendToDB(val): db.set('lives/', val) # value of lives is 0 print( Global lives value: + str(lives)) # will assign the value of lives variable asynchronously retrieveFromDB() # wait for lives to be assigned sleep(5) # lives should be the value from database print( Original database value: + str(lives)) # set value of lives to random integer on database random_int = randint(0,10) print( Random integer is: + str(random_int)) sendToDB(random_int) # new value has only been sent to database not the global variable # value should be the same as random_int print( Still original database value: + str(lives)) # will assign the value of lives variable asynchronously retrieveFromDB() # wait for lives to be assigned sleep(5) # lives should be updated and should print the random number print( Database value should return random_int value: + str(lives)) Unique Push Key Child Added, Child Updated, Child Removed Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . For help on the Processing library head to Processing setup . from processing import * import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16l0w', 'fir-docs-demo', 'fir-docs-demo') # Prints out the list of current objects at database URL 'users/'. # Continues to print every added object at database URL 'users/'. def handleAddedUser(url, data): user_id = data[ key ] username = data[ value ][ username ] print child_added callback: print key , user_id print username , username # Prints out the updates object and key on the URL 'users/'. def handleUpdatedUser(url, data): user_id = data[ key ] username = data[ value ][ username ] print child_updated: print key , user_id print username , username # Prints out the removed object and key on the URL 'users/'. def handleRemovedUser(url, data): user_id = data[ key ] username = data[ value ][ username ] print child_removed: print key , user_id print username , username # attach child_added listener on users/ path db.child_added('users/', handleAddedUser) # attach child_updated listener on users/ path db.child_updated('users/', handleUpdatedUser) # attach child_removed listener on users/ path db.child_removed('users/', handleRemovedUser) # setup processing def setup(): size(120, 30) background(0, 0, 0) # draw run command button def draw(): background(0,0,0) textSize(14) text( Run Command , 10, 20) # On clicking run command button pass command as a string. # JavaScript dialog box will show. # Take the key from previous user objects to use update and remove. def mouseClicked(): cmd = raw_input( Enter Command([a]dd, [r]emove, [u]pdate): ) if cmd is a : addUser() elif cmd is r : removeUser() elif cmd is u : updateUser() # Prompts for inputing new user's username into javascript dialog box. # Pushes new object to 'users/' URL path and will trigger child_added # event. def addUser(): username = raw_input( New username: ) db.push('users/', { 'username': username }) # Prompts for inputing new user's key into javascript dialog box. # Removed object at 'users/' + key URL path and will trigger # child_removed event. def removeUser(): user_id = raw_input( Enter key for user to delete: ) db.remove('users/' + user_id) # Prompts for inputing new user's key and username into javascript # dialog box. # Updates object at 'users/' + key URL path and will trigger # child_updated event. def updateUser(): user_id = raw_input( Enter key for user to update: ) username = raw_input( New username: ) db.update('users/' + user_id, { 'username': username }) # run processing run() Chat Example Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . For help on the Processing library head to Processing setup . # import firebase and processing library import firebase from processing import * # declare and initialize firebase db object db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # global name name = def printOnAdd(url, data): Callback function that prints the user's name followed by the message. print data[ value ][ name ], says: print \\t , data[ value ][ text ] # attach child_added listener on /messages path db.child_added('/messages', printOnAdd) # setup processing def setup(): size(120, 30) background(0, 0, 0) # draw send message button def draw(): textSize(14) text( Send Message , 10, 20) # on clicking message button enter message into # javascript dialog box def mouseClicked(): global name msg = raw_input( Message: ) db.push('/messages', { 'name': name, 'text': msg }) # prompts for inputing name into javascript dialog box def initializeChat(): global name name = raw_input( Name: ) # call initializeChat method and run processing initializeChat() run() Credits Google Firebase","title":"Firebase"},{"location":"firebase/firebase/#firebase","text":"The firebase library can be used to add real-time database functionality in your Python applications. This library depends on creating a Firebase app at Google Firebase . The Firebase database allows you to store, retrieve, and update data.","title":"Firebase"},{"location":"firebase/firebase/#firebase-functions","text":"firebase.loadFirebase(api_key, auth_domain, database_url) : Creates a firebase database connection to your existing Firebase app. It returns the Firebase object that you will use for all the database functionality (the class is explained below). Pass the API key and the app name twice as strings. You will continue to use this db object to work with the database. db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo')","title":"Firebase Functions"},{"location":"firebase/firebase/#firebase-class","text":"","title":"Firebase Class"},{"location":"firebase/firebase/#save-data","text":"db.set(url, data) : Write or replace data to a URL path, such as users/star_count . For example, db.set('users/star_count', 10) . db.push(url, data) : Writes data to URL path at a new unique child. For example, db.push('users/', {'username': 'Bob'}) . db.remove(url) : Removes data at the given URL path. For example, db.remove('users/') . db.update(url, data) : Writes or replaces data to the URL path. For example, db.update('users/star_count', 15) .","title":"Save Data"},{"location":"firebase/firebase/#retrieve-data","text":"db.child_added(url, fn, once=False) : Retrieve lists of items and listen for additions to a list of items to be passed to the callback function. By default, child_added continues to listen for new events, but can retrieve once by passing True to the third parameter once. For example, db.child_added('users/', printUsers, True) . db.child_removed(url, fn, once=False) : Listen for items being removed from a list to be passed to the callback function. By default, child_removed continues to listen for new events, but can retrieve once by passing True to the third parameter once. For example, db.child_removed('users/', printRemovedUsers, True) . db.child_updated(url, fn, once=False) : Listen for changes to the items in a list to be passed to the callback function. By default, child_updated continues to listen for new events, but can retrieve once by passing True to the third parameter once. For example, db.child_updated('users/', printUpdatedUsers, True) . db.value(url, fn, once=False) : Read and listen for changes to the entire contents of a URL path to be passed to the callback function. By default, value continues to listen for new events, but can retrieve once by passing True to the third parameter once. When once is set to True db.value can be used with db.set to set and read data at a URL path. For example, db.value('users/', printValues, True) .","title":"Retrieve Data"},{"location":"firebase/firebase/#setup","text":"Head to Firebase setup .","title":"Setup"},{"location":"firebase/firebase/#structured-data","text":"Head to Structured Data .","title":"Structured Data"},{"location":"firebase/firebase/#examples","text":"","title":"Examples"},{"location":"firebase/firebase/#savingupdatingremoving-data-example","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . Firebase import: Declare and initialize database variable(db) with the loadFirebase() method. firebase.loadFirebase(apiKey, auth_domain, database_url) @param apiKey: string @param auth_domain: string @param database_url: string import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') db.set(url, data) @param url: String @param data: Python data types and data structures # data can be numbers db.set('users/star_count', 10) # data can be strings db.set('users/to_be_deleted', '10') # data can be floats db.set('users/pi', 3.15) # data can be Python dictionaries db.set('users/spaceship', { userid : uid001 , health : 95, damage : 8, coordinates : [25, 99] }) # data can be Python lists db.set('users/my_array', [0, 1, 2, 3, 4, 5]) db.push(url, data) @param url: String @param data: Python data types and data structures # data can be integers/floats/strings db.push('math/', 3.14) # data can be Python dictionaries db.push('users/', {'username': 'Mary'}) db.push('users/', {'username': 'Joe'}) db.push('users/', { 'username': 'Bob', 'email': 'example@email.com', 'age': 22 }) db.remove(url) @param url: String # remove the data at the URL path 'users/to_be_deleted' db.remove('users/to_be_deleted') db.update(url, data) @param url: String @param data: Python data types and data structures # the data at the URL path 'users/star_count' is now the number 3.14 db.update('users/pi', 3.14)","title":"Saving/Updating/Removing Data Example"},{"location":"firebase/firebase/#retrieving-data","text":"To retrieve data through Firebase you must use a callback function. Callback functions will all receive two parameters. A URL string which is being listened on and a data dictionary. def printAddedUser(url, data): # URL path being listened on print url # relative location of the data from the passed URL path print data['key'] # data located at the URL path and key print data['value'] The data dictionary will have two attributes the 'key' for locating the data on the URL path and the 'value' of that data. ret = { # relative location of the data from the passed URL path key : -KOtqG2aj5ln1bJ2qkav , value : { username : Bob , health : 85, coordinates : [45, 110] } }","title":"Retrieving Data"},{"location":"firebase/firebase/#retrieving-data-examples","text":"","title":"Retrieving Data Examples"},{"location":"firebase/firebase/#on-event-callbacks","text":"The following retrieval examples have the once parameter equal to False . As new events occur on the given URL path the callback function will run.","title":"On Event Callbacks"},{"location":"firebase/firebase/#child-added","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printAddedUser(url, data): # When using db.push a unique key will be generated at the passed URL # for the data. key = data['key'] # This key will be used to update the data at that URL path and key. # This change will emit a child_updated event see Child Updated. updateUser(key) print data['value']['username'], has joined. # the child_added method will retrieve every child at the URL path 'users/' db.child_added('users/', printAddedUser) new_user = { 'username': 'Bob', 'profession': 'builder' } modify_user = { 'username': 'Bob', 'profession': 'plumber' } # The value at the path 'users/' + key will be modify_user, not new_user. def updateUser(key): db.update('users/' + key, modify_user) The push method will add a new user to the database. This will trigger a child_added event at 'users/' and fire the printAddedUser method. db.push('users/', new_user)","title":"Child Added"},{"location":"firebase/firebase/#child-removed","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printRemovedUser(url, data): print data['value']['username'], has left. # The child_removed method will fire when a child at the URL path 'users/' # is removed. db.child_removed('users/', printRemovedUser) The remove method will remove the object at 'users/bob002' from the database. This will trigger a child_removed event at 'users/' and fire the printRemovedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.remove('users/bob002')","title":"Child Removed"},{"location":"firebase/firebase/#child-updated","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printUpdatedUser(url, data): print data['value']['username'], has updated. # The child_updated method will fire when a child at the URL path 'users/' # is updated. db.child_updated('users/', printUpdatedUser) updated_user = { 'username': 'Bob', 'profession': 'plumber' } The update method will update the object at 'users/bob002' from the database. This will trigger a child_updated event at 'users/' and fire the printUpdatedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.update('users/bob002', updated_user)","title":"Child Updated"},{"location":"firebase/firebase/#value","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') This callback function will be passed the all the contents on the path. To print the username from the return data dictionary we must iterate over the returned data[ value ]. def printAllUsers(url, data): # entire path's contents are sent for user in data[ value ]: print data[ value ][user][ username ] + has joined. # The printAllUsers method will fire when any change at the URL path 'users/' # is modified(added, removed, updated). db.value('users/', printAllUsers) new_user = { 'username': 'Bob', 'profession': 'builder' } updated_user = { 'username': 'Bob', 'profession': 'plumber' } The following methods will all trigger the firing of the value method and the return of the entire path's value. Note: That the values must exists at users/bob002 for update and remove methods to work. db.set('users/bob002', new_user) db.update('users/bob002', updated_user) db.remove('users/bob002')","title":"Value"},{"location":"firebase/firebase/#once-event-callbacks","text":"The following retrieval examples have the once parameter equal to True . The callback function at the given URL path will run once.","title":"Once Event Callbacks"},{"location":"firebase/firebase/#child-added_1","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printAddedUser(url, data): print data['value']['username'], has joined. # The child_added method will retrieve one child at the URL path 'users/'. db.child_added('users/', printAddedUser, True) new_user = { 'username': 'Bob', 'profession': 'builder' } The push method will add a new user to the database, but this will not trigger the child_added event at 'users/' and fire the printAddedUser method! It has already retrieved a user and will not listen for this push method's child_added event. db.push('users/', new_user)","title":"Child Added"},{"location":"firebase/firebase/#child-removed_1","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printRemovedUser(url, data): print data['value']['username'], has left. # The child_removed method will fire when a child at the URL path 'users/' # is removed and not fire again. db.child_removed('users/', printRemovedUser, True) The remove method will remove the object at 'users/bob002' from the database. This will trigger a child_removed event at 'users/' and fire the printRemovedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.remove('users/bob002') # this update will not trigger the child_removed function db.remove('users/mary004')","title":"Child Removed"},{"location":"firebase/firebase/#child-updated_1","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # This callback function will print the username from the return data dictionary. def printUpdatedUser(url, data): print data['value']['username'], has updated. # The child_updated method will fire when a child at the URL path 'users/' # is updated and then will not fire again. db.child_updated('users/', printUpdatedUser, True) bob_updated_user = { 'username': 'Bob', 'profession': 'plumber' } mary_updated_user = { 'username': 'Mary', 'profession': 'doctor' } The update method will update the object at 'users/bob002' from the database. This will trigger a child_updated event at 'users/' and fire the printUpdatedUser method. To see the effect you will need to have a value at the path 'users/bob002'. db.update('users/bob002', bob_updated_user) # this update will not trigger the child_updated function db.update('users/mary004', mary_updated_user)","title":"Child Updated"},{"location":"firebase/firebase/#value_1","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') Try this callback function will be passed the all the contents on the path. To print the username from the return data dictionary we must iterate over the returned data[ value ]. def printAllUsers(url, data): # entire path's contents are sent for user in data[ value ]: print data[ value ][user][ username ] + has joined. # The printAllUsers method will fire only once at the URL path 'users/'. db.value('users/', printAllUsers, True) new_user = { 'username': 'Bob', 'profession': 'builder' } The push method will add a new user to the database, but this will not trigger the value event at 'users/' and fire the printAllUsers method! It has already retrieved the path contents and will not listen for this push method's value event. db.push('users/', new_user)","title":"Value"},{"location":"firebase/firebase/#common-use-cases","text":"","title":"Common Use Cases"},{"location":"firebase/firebase/#set-and-retrieve","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . Run this example more than once to fully understand the code! from time import sleep from random import randint import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16l0w', 'fir-docs-demo', 'fir-docs-demo') # initial lives count we want updated lives = 0 Try this callback function will be passed the all the contents on the path. There will need to be a integer value at the URL path 'lives/' for this example to work. def getLives(url, data): global lives lives = data[ value ] With the once parameter set to `True` the getInitialLives method will fire only once at the URL path 'lives/'. We can use this .value() method with .set() method to get and set values. def retrieveFromDB(): db.value('lives/', getLives, True) The set method will set the new value for lives in the database, but this will not trigger the value event at 'lives/' again until we want to get the value again. def sendToDB(val): db.set('lives/', val) # value of lives is 0 print( Global lives value: + str(lives)) # will assign the value of lives variable asynchronously retrieveFromDB() # wait for lives to be assigned sleep(5) # lives should be the value from database print( Original database value: + str(lives)) # set value of lives to random integer on database random_int = randint(0,10) print( Random integer is: + str(random_int)) sendToDB(random_int) # new value has only been sent to database not the global variable # value should be the same as random_int print( Still original database value: + str(lives)) # will assign the value of lives variable asynchronously retrieveFromDB() # wait for lives to be assigned sleep(5) # lives should be updated and should print the random number print( Database value should return random_int value: + str(lives))","title":"Set and Retrieve"},{"location":"firebase/firebase/#unique-push-key-child-added-child-updated-child-removed","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . For help on the Processing library head to Processing setup . from processing import * import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16l0w', 'fir-docs-demo', 'fir-docs-demo') # Prints out the list of current objects at database URL 'users/'. # Continues to print every added object at database URL 'users/'. def handleAddedUser(url, data): user_id = data[ key ] username = data[ value ][ username ] print child_added callback: print key , user_id print username , username # Prints out the updates object and key on the URL 'users/'. def handleUpdatedUser(url, data): user_id = data[ key ] username = data[ value ][ username ] print child_updated: print key , user_id print username , username # Prints out the removed object and key on the URL 'users/'. def handleRemovedUser(url, data): user_id = data[ key ] username = data[ value ][ username ] print child_removed: print key , user_id print username , username # attach child_added listener on users/ path db.child_added('users/', handleAddedUser) # attach child_updated listener on users/ path db.child_updated('users/', handleUpdatedUser) # attach child_removed listener on users/ path db.child_removed('users/', handleRemovedUser) # setup processing def setup(): size(120, 30) background(0, 0, 0) # draw run command button def draw(): background(0,0,0) textSize(14) text( Run Command , 10, 20) # On clicking run command button pass command as a string. # JavaScript dialog box will show. # Take the key from previous user objects to use update and remove. def mouseClicked(): cmd = raw_input( Enter Command([a]dd, [r]emove, [u]pdate): ) if cmd is a : addUser() elif cmd is r : removeUser() elif cmd is u : updateUser() # Prompts for inputing new user's username into javascript dialog box. # Pushes new object to 'users/' URL path and will trigger child_added # event. def addUser(): username = raw_input( New username: ) db.push('users/', { 'username': username }) # Prompts for inputing new user's key into javascript dialog box. # Removed object at 'users/' + key URL path and will trigger # child_removed event. def removeUser(): user_id = raw_input( Enter key for user to delete: ) db.remove('users/' + user_id) # Prompts for inputing new user's key and username into javascript # dialog box. # Updates object at 'users/' + key URL path and will trigger # child_updated event. def updateUser(): user_id = raw_input( Enter key for user to update: ) username = raw_input( New username: ) db.update('users/' + user_id, { 'username': username }) # run processing run()","title":"Unique Push Key Child Added, Child Updated, Child Removed"},{"location":"firebase/firebase/#chat-example","text":"Note: This is not a working example until you add your own API key, database URL and authentication URL. For help on setup head to Firebase setup . For help on the Processing library head to Processing setup . # import firebase and processing library import firebase from processing import * # declare and initialize firebase db object db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') # global name name = def printOnAdd(url, data): Callback function that prints the user's name followed by the message. print data[ value ][ name ], says: print \\t , data[ value ][ text ] # attach child_added listener on /messages path db.child_added('/messages', printOnAdd) # setup processing def setup(): size(120, 30) background(0, 0, 0) # draw send message button def draw(): textSize(14) text( Send Message , 10, 20) # on clicking message button enter message into # javascript dialog box def mouseClicked(): global name msg = raw_input( Message: ) db.push('/messages', { 'name': name, 'text': msg }) # prompts for inputing name into javascript dialog box def initializeChat(): global name name = raw_input( Name: ) # call initializeChat method and run processing initializeChat() run()","title":"Chat Example"},{"location":"firebase/firebase/#credits","text":"Google Firebase","title":"Credits"},{"location":"firebase/setup/","text":"Firebase Setup Below are steps to setup you Google Firebase app and create a firebase library database object. Head to Google Firebase . Click 'SIGN IN' at the upper right corner of the site. You will need a Google account to create a Firebase account. Log into your Google account. Click 'Go to console' in the upper right corner of the site. Click 'CREATE NEW PROJECT' in the center of the page. A modal window should pop up. Fill in the project name. You should see this Firebase app dashboard. Click on the 'Add Firebase to your web app' icon. Copy the API Key, Auth Domain, and Database URL from the highlighted areas. These three values are used in the firebase.loadFirebase function: db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') . On the side panel of the Firebase app dashboard click the Database icon. The dashboard shows three tabs for the Realtime Database. Click on the Rules tab. The Firebase database Rules section is where rules to ensure security are set. For the basic setup the rules will be relaxed. SECURE your rules before sharing your firebase library based app. Set the rules for \".read\" and \".write\" to \"true\" from \"auth != null\". With the Firebase App setup done in the Python Mini add the following code: import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') The db variable now has the firebase object that is connected to the newly created app.","title":"Setup"},{"location":"firebase/setup/#firebase-setup","text":"Below are steps to setup you Google Firebase app and create a firebase library database object. Head to Google Firebase . Click 'SIGN IN' at the upper right corner of the site. You will need a Google account to create a Firebase account. Log into your Google account. Click 'Go to console' in the upper right corner of the site. Click 'CREATE NEW PROJECT' in the center of the page. A modal window should pop up. Fill in the project name. You should see this Firebase app dashboard. Click on the 'Add Firebase to your web app' icon. Copy the API Key, Auth Domain, and Database URL from the highlighted areas. These three values are used in the firebase.loadFirebase function: db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') . On the side panel of the Firebase app dashboard click the Database icon. The dashboard shows three tabs for the Realtime Database. Click on the Rules tab. The Firebase database Rules section is where rules to ensure security are set. For the basic setup the rules will be relaxed. SECURE your rules before sharing your firebase library based app. Set the rules for \".read\" and \".write\" to \"true\" from \"auth != null\". With the Firebase App setup done in the Python Mini add the following code: import firebase db = firebase.loadFirebase('AIzaSyATrCtlpxYanFOSt_6xPmj2z2phAL16lAI', 'fir-docs-demo', 'fir-docs-demo') The db variable now has the firebase object that is connected to the newly created app.","title":"Firebase Setup"},{"location":"firebase/structured_data/","text":"Structured Data in Firebase Firebase Realtime Database data is stored as JSON objects and takes the form of a tree. When you add data to the JSON tree, it becomes a node in the existing JSON structure with an associated key. You can provide your own keys, such as user IDs or semantic names, or they can be provided for you using push() . Note: Keys cannot contain ., $, #, [, ], /, or ASCII control characters 0-31 or 127. Example User Tree Structure { users : { -KP-55vu7MyiqFkpOWeP : { username : Bob }, -KP-59G8ezqWdBdNMOZG : { username : John }, -KP-5AdrJLSEVN1cZ27F : { username : Mary }, bob002 : { name : Bob , friends : { mary004 : true } }, mary004 : { name : Mary , friends : { bob002 : true, john010 : true } }, john010 : { name : John , friends : { mary004 : true } } } } Firebase Console Data Find in your Firebase Console .","title":"Structured Data"},{"location":"firebase/structured_data/#structured-data-in-firebase","text":"Firebase Realtime Database data is stored as JSON objects and takes the form of a tree. When you add data to the JSON tree, it becomes a node in the existing JSON structure with an associated key. You can provide your own keys, such as user IDs or semantic names, or they can be provided for you using push() . Note: Keys cannot contain ., $, #, [, ], /, or ASCII control characters 0-31 or 127.","title":"Structured Data in Firebase"},{"location":"firebase/structured_data/#example-user-tree-structure","text":"{ users : { -KP-55vu7MyiqFkpOWeP : { username : Bob }, -KP-59G8ezqWdBdNMOZG : { username : John }, -KP-5AdrJLSEVN1cZ27F : { username : Mary }, bob002 : { name : Bob , friends : { mary004 : true } }, mary004 : { name : Mary , friends : { bob002 : true, john010 : true } }, john010 : { name : John , friends : { mary004 : true } } } }","title":"Example User Tree Structure"},{"location":"firebase/structured_data/#firebase-console-data","text":"Find in your Firebase Console .","title":"Firebase Console Data"},{"location":"gesture/gesture/","text":"gesture gesture library will detect your gesture by using webcam, you can call a function when a gesture ( left , right , up or down ) is detected. Functions gesture.start() : Start webcam and detecting gesture gesture.stop() : Stop webcam gesture.on(dir, func) : Set callback function for dir , when dir is detected, this function will be called. dir 's value could be left , right , up and down . If you didn't use this on function to set callback function, by default, if left is detected, function gestureOnLeft will be called (if defined); if right is detected, function gestureOnRight will be called (if defined); if up is detected, function gestureOnUp will be called (if defined); if down is detected, function gestureOnDown will be called (if defined). Example import gesture def on_left(): print moving left def on_right(): print moving right def gestureOnUp(): # this is the default callback function when `up` is detected # you can use gesture.on('up', other_func) to set this callback # function to be other_func print moving up def gestureOnDown(): print moving down # set callback function for left and right gesture gesture.on( left , on_left) gesture.on( right , on_right) # start webcam and detecting gesture.start()","title":"gesture"},{"location":"gesture/gesture/#gesture","text":"gesture library will detect your gesture by using webcam, you can call a function when a gesture ( left , right , up or down ) is detected.","title":"gesture"},{"location":"gesture/gesture/#functions","text":"gesture.start() : Start webcam and detecting gesture gesture.stop() : Stop webcam gesture.on(dir, func) : Set callback function for dir , when dir is detected, this function will be called. dir 's value could be left , right , up and down . If you didn't use this on function to set callback function, by default, if left is detected, function gestureOnLeft will be called (if defined); if right is detected, function gestureOnRight will be called (if defined); if up is detected, function gestureOnUp will be called (if defined); if down is detected, function gestureOnDown will be called (if defined).","title":"Functions"},{"location":"gesture/gesture/#example","text":"import gesture def on_left(): print moving left def on_right(): print moving right def gestureOnUp(): # this is the default callback function when `up` is detected # you can use gesture.on('up', other_func) to set this callback # function to be other_func print moving up def gestureOnDown(): print moving down # set callback function for left and right gesture gesture.on( left , on_left) gesture.on( right , on_right) # start webcam and detecting gesture.start()","title":"Example"},{"location":"impress/impress/","text":"Impress Impress can be used to create slideshows that are more than just a simple left to right, slide by slide implementation like Powerpoint. Take a look at this demo here . Slideshow Functions impress.Slideshow(width, height) : Creates a slideshow that will open upon presentation in a window with the specified width and height. It also returns a Slideshow object (the class is explained below). impress.Slide(x, y, z) : Creates a slide at position (x, y, z) that can be edited and added to a slideshow. If z is not included, it is set to 0 by default. This also returns a Slide object (the class is explained below). impress.Paragraph() : Creates a paragraph object that can be added to a slide. It returns Paragraph object that can be modified. impress.builtinFonts() : Returns a list of names of built in fonts. impress.builtinThemes() : Returns a list of names of built in themes. Slideshow Class slideshow.setTitle(title) : Sets the title of the Slideshow to the string title. The default title is \"Impress Presentation\". slideshow.setTheme(theme) : Sets the theme of the Slideshow to the built in theme passed in the string theme. If the theme is not set, it will be set to the default theme. slideshow.setFont(font) : Sets the font of all the text in the slideshow to the built in font passed in the string font. slideshow.setBackgroundColor(r, g, b) : Sets the background color theme of the slideshow to the specified red, green, and blue values. slideshow.setFontColor(r, g, b) : Sets the font color of the text in the slideshow to the specified red, green, and blue values. slideshow.setLinkColor(r, g, b) : Sets the background color of all links in the slideshow to the specified red, green, and blue values. slideshow.addSlides(slides) : Sets the list of slides for the Slideshow to the list of Slides that is passed in the function call slideshow.present() : Creates the HTML for the slideshow and opens it in a new window. slideshow.next() : Goes to the next slide if the slideshow is open slideshow.prev() : Goes to the previous slide if the slideshow is open Slide Class slide.setPosition(x, y[, z=0]) : Sets the position of the slide to the specified (x, y, z) coordinates. This function can also be called with only x and y. slide.setRotation(x, y, z) : Sets the rotation of the slide around the x-axis, the y-axis, and the z-axis. If the slideshow will remain 2-D, call this function with (0, 0, z) . slide.setScale(number) : Sets the scale for the current slide. This number must be greater than or equal to 1. slide.addList(list[, ordered=False]) : Adds the list to the elements that are added in the current slide. If ordered is True then it will be an ordered list. slide.addImage(imageURL[, alignment=\"center\", size=None]) : Adds the image with the specified URL to the current slide with the specified alignment. The default alignment is \"center\". You can set the alignment to \"right\", \"center\", or \"left\". The size is the number of pixels for the width of the image. It will keep the proportions of the original image if set. If you want to set the size you must also set the alignment. slide.addHeader(text, level[, alignment=\"center\"]) : Adds a header with the specified text to the current Slide. The level must be a number between 1 and 6, as it represents the HTML tags h1 , h2 , ... h6 . By default, the alignment is \"center\". You can set the alignment to \"right\", \"center\", or \"left\". slide.addParagraph(paragraph[, alignment=\"center\"]) : Adds a paragraph to the specified slide. Default alignment is \"center\". You can set the alignment to \"right\", \"center\", or \"left\". Paragraph Class paragraph.addText(text[, bold=False, italic=False]) : Adds text to the current paragraph that is bold and/or italicized. Default values for bold and italic are both False. paragraph.addLink(text, address[, target=\"new\"]) : Adds a hyperlink to the current paragraph. The text that is shown is the text that appears in place of the web address. If you want the webpage to open in a new window, you must pass the target as \"self\". If you want the link to open in the same window, do not include the third parameter. paragraph.addBreak() : Adds a line break to the current paragraph. Example import impress import time print impress.builtinFonts() # ['Slabo', 'Roboto Condensed', 'Titillium Web', 'PT Sans', 'Rakkas', 'Baloo Da', 'Lobster', 'Lalezar', 'Poiret One', 'Bungee', 'Bungee Shade', 'Shrikhand', 'Yatra One', 'Mogra', 'Black Ops One', 'Concert One', 'Kavoon', 'Ewert', 'Fruktur', 'Baloo', 'Monoton', 'Creepster', 'Righteous', 'Bangers', 'Fredoka One', 'Special Elite', 'Bubblegum Sans', 'Limelight', 'Freckle Face', 'Cabin Sketch', 'Frijole', 'Finger Paint', 'Fontdiner Swanky', 'Fredericka the Great', 'Baumans', 'Slackey'] print impress.builtinThemes() # ['blue', 'red', 'green', 'dark'] list1 = [ Jake , Andrew , Jeden , Gideon , Jacica ] # create a slideshow, set theme, fonts, etc. x = impress.Slideshow(1000, 500) x.setTitle( Team JAZZ Presentation ) x.setTheme( green ) x.setFont( Slackey ) # create first slide slide1 = impress.Slide(50, 10, 0) slide1.addHeader( Meet our Team , 1) slide1.setScale(1) slide1.addList(list1) slide1.addImage( http://cdn.bulbagarden.net/upload/thumb/0/0d/025Pikachu.png/250px-025Pikachu.png , center ) slide1.addHeader( Awesome!!! , 2, center ) # create second slide slide2 = impress.Slide(300, 1000, 0) slide2.setRotation(0, 0, 90) slide2.setScale(3) slide2.addHeader( Second Slide , 2, center ) slide2.addImage( http://cdn.bulbagarden.net/upload/thumb/8/85/385Jirachi.png/250px-385Jirachi.png , center ) # create third slide slide3 = impress.Slide(1000, 200, 90) slide3.setRotation(0, 90, 180) slide3.setScale(2) p = impress.Paragraph() p.addText( This is a test paragraph , True, False) p.addBreak() p.addText( .. and a test link ) p.addLink( OYOclass , https://oyoclass.com/ ) p.addBreak() p.addText( Another text , False, True) slide3.addParagraph(p, center ) # now add above 3 slides to our slideshow x.addSlides([slide1, slide2, slide3]) x.present() #go to next slide after waiting five seconds time.sleep(5) x.next()","title":"impress"},{"location":"impress/impress/#impress","text":"Impress can be used to create slideshows that are more than just a simple left to right, slide by slide implementation like Powerpoint. Take a look at this demo here .","title":"Impress"},{"location":"impress/impress/#slideshow-functions","text":"impress.Slideshow(width, height) : Creates a slideshow that will open upon presentation in a window with the specified width and height. It also returns a Slideshow object (the class is explained below). impress.Slide(x, y, z) : Creates a slide at position (x, y, z) that can be edited and added to a slideshow. If z is not included, it is set to 0 by default. This also returns a Slide object (the class is explained below). impress.Paragraph() : Creates a paragraph object that can be added to a slide. It returns Paragraph object that can be modified. impress.builtinFonts() : Returns a list of names of built in fonts. impress.builtinThemes() : Returns a list of names of built in themes.","title":"Slideshow Functions"},{"location":"impress/impress/#slideshow-class","text":"slideshow.setTitle(title) : Sets the title of the Slideshow to the string title. The default title is \"Impress Presentation\". slideshow.setTheme(theme) : Sets the theme of the Slideshow to the built in theme passed in the string theme. If the theme is not set, it will be set to the default theme. slideshow.setFont(font) : Sets the font of all the text in the slideshow to the built in font passed in the string font. slideshow.setBackgroundColor(r, g, b) : Sets the background color theme of the slideshow to the specified red, green, and blue values. slideshow.setFontColor(r, g, b) : Sets the font color of the text in the slideshow to the specified red, green, and blue values. slideshow.setLinkColor(r, g, b) : Sets the background color of all links in the slideshow to the specified red, green, and blue values. slideshow.addSlides(slides) : Sets the list of slides for the Slideshow to the list of Slides that is passed in the function call slideshow.present() : Creates the HTML for the slideshow and opens it in a new window. slideshow.next() : Goes to the next slide if the slideshow is open slideshow.prev() : Goes to the previous slide if the slideshow is open","title":"Slideshow Class"},{"location":"impress/impress/#slide-class","text":"slide.setPosition(x, y[, z=0]) : Sets the position of the slide to the specified (x, y, z) coordinates. This function can also be called with only x and y. slide.setRotation(x, y, z) : Sets the rotation of the slide around the x-axis, the y-axis, and the z-axis. If the slideshow will remain 2-D, call this function with (0, 0, z) . slide.setScale(number) : Sets the scale for the current slide. This number must be greater than or equal to 1. slide.addList(list[, ordered=False]) : Adds the list to the elements that are added in the current slide. If ordered is True then it will be an ordered list. slide.addImage(imageURL[, alignment=\"center\", size=None]) : Adds the image with the specified URL to the current slide with the specified alignment. The default alignment is \"center\". You can set the alignment to \"right\", \"center\", or \"left\". The size is the number of pixels for the width of the image. It will keep the proportions of the original image if set. If you want to set the size you must also set the alignment. slide.addHeader(text, level[, alignment=\"center\"]) : Adds a header with the specified text to the current Slide. The level must be a number between 1 and 6, as it represents the HTML tags h1 , h2 , ... h6 . By default, the alignment is \"center\". You can set the alignment to \"right\", \"center\", or \"left\". slide.addParagraph(paragraph[, alignment=\"center\"]) : Adds a paragraph to the specified slide. Default alignment is \"center\". You can set the alignment to \"right\", \"center\", or \"left\".","title":"Slide Class"},{"location":"impress/impress/#paragraph-class","text":"paragraph.addText(text[, bold=False, italic=False]) : Adds text to the current paragraph that is bold and/or italicized. Default values for bold and italic are both False. paragraph.addLink(text, address[, target=\"new\"]) : Adds a hyperlink to the current paragraph. The text that is shown is the text that appears in place of the web address. If you want the webpage to open in a new window, you must pass the target as \"self\". If you want the link to open in the same window, do not include the third parameter. paragraph.addBreak() : Adds a line break to the current paragraph.","title":"Paragraph Class"},{"location":"impress/impress/#example","text":"import impress import time print impress.builtinFonts() # ['Slabo', 'Roboto Condensed', 'Titillium Web', 'PT Sans', 'Rakkas', 'Baloo Da', 'Lobster', 'Lalezar', 'Poiret One', 'Bungee', 'Bungee Shade', 'Shrikhand', 'Yatra One', 'Mogra', 'Black Ops One', 'Concert One', 'Kavoon', 'Ewert', 'Fruktur', 'Baloo', 'Monoton', 'Creepster', 'Righteous', 'Bangers', 'Fredoka One', 'Special Elite', 'Bubblegum Sans', 'Limelight', 'Freckle Face', 'Cabin Sketch', 'Frijole', 'Finger Paint', 'Fontdiner Swanky', 'Fredericka the Great', 'Baumans', 'Slackey'] print impress.builtinThemes() # ['blue', 'red', 'green', 'dark'] list1 = [ Jake , Andrew , Jeden , Gideon , Jacica ] # create a slideshow, set theme, fonts, etc. x = impress.Slideshow(1000, 500) x.setTitle( Team JAZZ Presentation ) x.setTheme( green ) x.setFont( Slackey ) # create first slide slide1 = impress.Slide(50, 10, 0) slide1.addHeader( Meet our Team , 1) slide1.setScale(1) slide1.addList(list1) slide1.addImage( http://cdn.bulbagarden.net/upload/thumb/0/0d/025Pikachu.png/250px-025Pikachu.png , center ) slide1.addHeader( Awesome!!! , 2, center ) # create second slide slide2 = impress.Slide(300, 1000, 0) slide2.setRotation(0, 0, 90) slide2.setScale(3) slide2.addHeader( Second Slide , 2, center ) slide2.addImage( http://cdn.bulbagarden.net/upload/thumb/8/85/385Jirachi.png/250px-385Jirachi.png , center ) # create third slide slide3 = impress.Slide(1000, 200, 90) slide3.setRotation(0, 90, 180) slide3.setScale(2) p = impress.Paragraph() p.addText( This is a test paragraph , True, False) p.addBreak() p.addText( .. and a test link ) p.addLink( OYOclass , https://oyoclass.com/ ) p.addBreak() p.addText( Another text , False, True) slide3.addParagraph(p, center ) # now add above 3 slides to our slideshow x.addSlides([slide1, slide2, slide3]) x.present() #go to next slide after waiting five seconds time.sleep(5) x.next()","title":"Example"},{"location":"processing/color/","text":"Color Setting background() colorMode() fill() noFill() noStroke() stroke() Creating Reading alpha() blendColor() blue() brightness() color() green() hue() lerpColor() red() saturation() Example from processing import * def setup(): size(400, 400) background(180) def draw(): fill(255, 0, 0) noStroke() triangle(130, 175, 158, 120, 186, 175) run() Reference Processing.org","title":"Color"},{"location":"processing/color/#color","text":"","title":"Color"},{"location":"processing/color/#setting","text":"background() colorMode() fill() noFill() noStroke() stroke()","title":"Setting"},{"location":"processing/color/#creating-reading","text":"alpha() blendColor() blue() brightness() color() green() hue() lerpColor() red() saturation()","title":"Creating &amp; Reading"},{"location":"processing/color/#example","text":"from processing import * def setup(): size(400, 400) background(180) def draw(): fill(255, 0, 0) noStroke() triangle(130, 175, 158, 120, 186, 175) run()","title":"Example"},{"location":"processing/color/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/constants/","text":"Constants HALF_PI : PI / 2.0 THIRD_PI : PI / 3.0 PI : PI (3.14159...) TWO_PI : PI * 2.0 QUARTER_PI : PI / 4.0 DEG_TO_RAD : PI / 180 RAD_TO_REG : 180 / PI","title":"Constants"},{"location":"processing/constants/#constants","text":"HALF_PI : PI / 2.0 THIRD_PI : PI / 3.0 PI : PI (3.14159...) TWO_PI : PI * 2.0 QUARTER_PI : PI / 4.0 DEG_TO_RAD : PI / 180 RAD_TO_REG : 180 / PI","title":"Constants"},{"location":"processing/datetime/","text":"Date Time day() hour() millis() minute() month() second() year() Example from processing import * def setup(): size(500, 400) def draw(): background(0) s = Current time: %02d:%02d:%02d % (hour(), minute(), second()) textSize(35) fill(0, 255, 0) text(s, 80, 200) run() Reference Processing.org","title":"Date & Time"},{"location":"processing/datetime/#date-time","text":"day() hour() millis() minute() month() second() year()","title":"Date &amp; Time"},{"location":"processing/datetime/#example","text":"from processing import * def setup(): size(500, 400) def draw(): background(0) s = Current time: %02d:%02d:%02d % (hour(), minute(), second()) textSize(35) fill(0, 255, 0) text(s, 80, 200) run()","title":"Example"},{"location":"processing/datetime/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/image/","text":"Image PImage createImage() Loading Displaying image() imageMode() loadImage() requestImage() Pixels blend() copy() filter() getPixel() setPixel() Example from processing import * pikachu = None ball = None def setup(): global pikachu, ball size(400, 400) colorMode(RGB, 100) # you may want to change the image url below pikachu = loadImage( http://www.avatars101.com/avatars/Pokemon/301BE8845F43838DE7A6B6DFEB2B963E/Pikachu.gif ) ball = requestImage( http://vignette4.wikia.nocookie.net/pokemon/images/4/46/Timer_Ball.png ) def draw(): background(0, 200, 200) image(pikachu, 100, 100) if ball.width != 0 and ball.width != -1: image(ball, 200, 50, 65, 65) run() Reference Processing.org","title":"Image"},{"location":"processing/image/#image","text":"PImage createImage()","title":"Image"},{"location":"processing/image/#loading-displaying","text":"image() imageMode() loadImage() requestImage()","title":"Loading &amp; Displaying"},{"location":"processing/image/#pixels","text":"blend() copy() filter() getPixel() setPixel()","title":"Pixels"},{"location":"processing/image/#example","text":"from processing import * pikachu = None ball = None def setup(): global pikachu, ball size(400, 400) colorMode(RGB, 100) # you may want to change the image url below pikachu = loadImage( http://www.avatars101.com/avatars/Pokemon/301BE8845F43838DE7A6B6DFEB2B963E/Pikachu.gif ) ball = requestImage( http://vignette4.wikia.nocookie.net/pokemon/images/4/46/Timer_Ball.png ) def draw(): background(0, 200, 200) image(pikachu, 100, 100) if ball.width != 0 and ball.width != -1: image(ball, 200, 50, 65, 65) run()","title":"Example"},{"location":"processing/image/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/input/","text":"Input You can detect if user pressed keyboard or mouse. Keyboard Property keyboard.key : the actual key, if you pressed e , this will be e keyboard.keyCode : the key's code, if you pressed e , this will be 69 keyboard.keyPressed : True if any key is pressed and False if no keys are pressed Constants BACKSPACE : backspace key code TAB : tab key code ENTER : enter key code RETURN : return key code ESC : esc key code DELETE : delete key code SHIFT : shift key code CONTROL : control key code ALT : alt key code CAPSLK : caps lock key code PGUP : page up key code PGDN : page down key code END : end key code HOME : home key code LEFT : left arrow key code UP : up arrow key code RIGHT : right arrow key code DOWN : down arrow key code F1 , F2 ... F12 : F1 ~ F12 key code NUMLK : number lock key code INSERT : insert key code Events keyPressed() : If any key is pressed, this function will be called keyReleased() : If any key is released, this function will be called keyTyped() : If any key is typed, this function will be called Example Move a rectangle when left or right arrow key is pressed. from processing import * rectX = 0 def setup(): size(500, 400) def draw(): background(0, 0, 0) rect(rectX, 100, 50, 10) def keyPressed(): global rectX if keyboard.keyCode == LEFT: rectX -= 5 elif keyboard.keyCode == RIGHT: rectX += 5 run() Mouse Property mouse.x : current horizontal coordinate of the mouse mouse.y : current vertical coordinate of the mouse mouse.px : the previous horizontal coordinate of the mouse mouse.py : the previous vertical coordinate of the mouse mouse.pressed : if mouse is pressed mouse.button : which mouse button is pressed, left mouse button is 37, right mouse button is 39 Functions mouseClicked() : will be called when click clicked mouseDragged() : will be called when drag mouse mousePressed() : will be called when press mouse mouseMoved() : will be called when move mouse mouseReleased() : will be called when release mouse mouseOut() : will be called when mouse pointer leaves canvas mouseOver() : will be called when the mouse pointer moves over canvas Example from processing import * def setup(): size(500, 400) def draw(): background(0) def mousePressed(): print pressed at: , mouse.x, mouse.y # left button is 37, right button is 39 print mouse button: , mouse.button def mouseMoved(): info = Mouse moved at (%s, %s) % (mouse.x, mouse.y) text(info, mouse.x, mouse.y) def mouseReleased(): text( Mouse released , 10, 10) run() Reference Processing.org","title":"Input"},{"location":"processing/input/#input","text":"You can detect if user pressed keyboard or mouse.","title":"Input"},{"location":"processing/input/#keyboard","text":"","title":"Keyboard"},{"location":"processing/input/#property","text":"keyboard.key : the actual key, if you pressed e , this will be e keyboard.keyCode : the key's code, if you pressed e , this will be 69 keyboard.keyPressed : True if any key is pressed and False if no keys are pressed","title":"Property"},{"location":"processing/input/#constants","text":"BACKSPACE : backspace key code TAB : tab key code ENTER : enter key code RETURN : return key code ESC : esc key code DELETE : delete key code SHIFT : shift key code CONTROL : control key code ALT : alt key code CAPSLK : caps lock key code PGUP : page up key code PGDN : page down key code END : end key code HOME : home key code LEFT : left arrow key code UP : up arrow key code RIGHT : right arrow key code DOWN : down arrow key code F1 , F2 ... F12 : F1 ~ F12 key code NUMLK : number lock key code INSERT : insert key code","title":"Constants"},{"location":"processing/input/#events","text":"keyPressed() : If any key is pressed, this function will be called keyReleased() : If any key is released, this function will be called keyTyped() : If any key is typed, this function will be called","title":"Events"},{"location":"processing/input/#example","text":"Move a rectangle when left or right arrow key is pressed. from processing import * rectX = 0 def setup(): size(500, 400) def draw(): background(0, 0, 0) rect(rectX, 100, 50, 10) def keyPressed(): global rectX if keyboard.keyCode == LEFT: rectX -= 5 elif keyboard.keyCode == RIGHT: rectX += 5 run()","title":"Example"},{"location":"processing/input/#mouse","text":"","title":"Mouse"},{"location":"processing/input/#property_1","text":"mouse.x : current horizontal coordinate of the mouse mouse.y : current vertical coordinate of the mouse mouse.px : the previous horizontal coordinate of the mouse mouse.py : the previous vertical coordinate of the mouse mouse.pressed : if mouse is pressed mouse.button : which mouse button is pressed, left mouse button is 37, right mouse button is 39","title":"Property"},{"location":"processing/input/#functions","text":"mouseClicked() : will be called when click clicked mouseDragged() : will be called when drag mouse mousePressed() : will be called when press mouse mouseMoved() : will be called when move mouse mouseReleased() : will be called when release mouse mouseOut() : will be called when mouse pointer leaves canvas mouseOver() : will be called when the mouse pointer moves over canvas","title":"Functions"},{"location":"processing/input/#example_1","text":"from processing import * def setup(): size(500, 400) def draw(): background(0) def mousePressed(): print pressed at: , mouse.x, mouse.y # left button is 37, right button is 39 print mouse button: , mouse.button def mouseMoved(): info = Mouse moved at (%s, %s) % (mouse.x, mouse.y) text(info, mouse.x, mouse.y) def mouseReleased(): text( Mouse released , 10, 10) run()","title":"Example"},{"location":"processing/input/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/light-camera/","text":"Light Camera Lights ambientLight() directionalLight() lightFalloff() lightSpecular() lights() noLights() normal() pointLight() spotLight() : Note - on this linked page, this function's syntax is spotLight(v1, v2, v3, nx, ny, nz, angle, concentration) , which SHOULD BE spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration) Camera beginCamera() camera() endCamera() frustum() ortho() perspective() printCamera() printProjection() Coordinates modelX() modelY() modelZ() screenX() screenY() screenZ() Material Properties ambient() emissive() shininess() specular() Example from processing import * def setup(): size(560, 400, P3D) #printCamera() #printProjection() def draw(): noFill() beginCamera() camera() rotateX(-PI/6) endCamera() translate(50, 50, 0) rotateY(PI/3) box(45) run() Reference Processing.org","title":"Light & Camera"},{"location":"processing/light-camera/#light-camera","text":"","title":"Light &amp; Camera"},{"location":"processing/light-camera/#lights","text":"ambientLight() directionalLight() lightFalloff() lightSpecular() lights() noLights() normal() pointLight() spotLight() : Note - on this linked page, this function's syntax is spotLight(v1, v2, v3, nx, ny, nz, angle, concentration) , which SHOULD BE spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration)","title":"Lights"},{"location":"processing/light-camera/#camera","text":"beginCamera() camera() endCamera() frustum() ortho() perspective() printCamera() printProjection()","title":"Camera"},{"location":"processing/light-camera/#coordinates","text":"modelX() modelY() modelZ() screenX() screenY() screenZ()","title":"Coordinates"},{"location":"processing/light-camera/#material-properties","text":"ambient() emissive() shininess() specular()","title":"Material Properties"},{"location":"processing/light-camera/#example","text":"from processing import * def setup(): size(560, 400, P3D) #printCamera() #printProjection() def draw(): noFill() beginCamera() camera() rotateX(-PI/6) endCamera() translate(50, 50, 0) rotateY(PI/3) box(45) run()","title":"Example"},{"location":"processing/light-camera/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/math/","text":"Math PVector Calculation constrain() dist() lerp() mag() map() norm() sq() Trigonometry degrees() radians() Random noise() noiseDetail() noiseSeed() random() randomSeed() Example from processing import * xoff = 0.0 width = 400 height = 300 def setup(): size(400, 400) def draw(): global xoff background(204) xoff = xoff + .01 n = noise(xoff) * width line(n, 0, n, height) run() Reference Processing.org Processing noise function","title":"Math"},{"location":"processing/math/#math","text":"PVector","title":"Math"},{"location":"processing/math/#calculation","text":"constrain() dist() lerp() mag() map() norm() sq()","title":"Calculation"},{"location":"processing/math/#trigonometry","text":"degrees() radians()","title":"Trigonometry"},{"location":"processing/math/#random","text":"noise() noiseDetail() noiseSeed() random() randomSeed()","title":"Random"},{"location":"processing/math/#example","text":"from processing import * xoff = 0.0 width = 400 height = 300 def setup(): size(400, 400) def draw(): global xoff background(204) xoff = xoff + .01 n = noise(xoff) * width line(n, 0, n, height) run()","title":"Example"},{"location":"processing/math/#reference","text":"Processing.org Processing noise function","title":"Reference"},{"location":"processing/rendering/","text":"Rendering PGraphics createGraphics() hint()","title":"Rendering"},{"location":"processing/rendering/#rendering","text":"PGraphics createGraphics() hint()","title":"Rendering"},{"location":"processing/setup/","text":"Setup processing A typical running structure Here is a typical way to use Processing library: from processing import * healthPoint = 3 def setup(): size(500, 400) def draw(): background(0, 0, 0) # do other drawings and logic # here if you want to end the drawing, call exitp() if healthPoint == 0: exitp() run() Notice the run() function at bottom, it will call setup() once, and will iteratively call draw() function again and again and again, until you call exitp() function. In setup() function, we setup the canvas size for drawing, which is 500px in width and 400px in height. In the draw() function, we make the canvas's background as black (RGB color (0, 0, 0) is black). Get input from user If you want to make a game with Processing, one important part will be detecting if player pressed keyboard or clicked mouse, which is: from processing import * healthPoint = 3 def setup(): size(500, 400) def draw(): background(0, 0, 0) # do other drawings and logic # here if you want to end the drawing, call exitp() if healthPoint == 0: exitp() def keyPressed(): if keyboard.keyCode == 37: # left arrow key pressed # do something ... elif keyboard.keyCode == 39: # right arrow key # do something ... def mousePressed(): print Mouse pressed at , mouse.x, mouse.y run() 3D drawing Processing also support 3D drawing, to use 3D, you need to setup canvas to \"3D\" model by passing P3D as the 3rd parameter in size function: from processing import * rotating = 0.01 def setup(): size(400, 400, P3D) def draw(): global rotating background(0, 0, 0) translate(200, 100, 0) rotateY(rotating) rotating += 0.01 if rotating = PI: rotating = 0.01 fill(255, 0, 0) box(40) run() To check more functions about Processing library, check all functions under Processing Graphic on the left.","title":"Setup"},{"location":"processing/setup/#setup-processing","text":"","title":"Setup processing"},{"location":"processing/setup/#a-typical-running-structure","text":"Here is a typical way to use Processing library: from processing import * healthPoint = 3 def setup(): size(500, 400) def draw(): background(0, 0, 0) # do other drawings and logic # here if you want to end the drawing, call exitp() if healthPoint == 0: exitp() run() Notice the run() function at bottom, it will call setup() once, and will iteratively call draw() function again and again and again, until you call exitp() function. In setup() function, we setup the canvas size for drawing, which is 500px in width and 400px in height. In the draw() function, we make the canvas's background as black (RGB color (0, 0, 0) is black).","title":"A typical running structure"},{"location":"processing/setup/#get-input-from-user","text":"If you want to make a game with Processing, one important part will be detecting if player pressed keyboard or clicked mouse, which is: from processing import * healthPoint = 3 def setup(): size(500, 400) def draw(): background(0, 0, 0) # do other drawings and logic # here if you want to end the drawing, call exitp() if healthPoint == 0: exitp() def keyPressed(): if keyboard.keyCode == 37: # left arrow key pressed # do something ... elif keyboard.keyCode == 39: # right arrow key # do something ... def mousePressed(): print Mouse pressed at , mouse.x, mouse.y run()","title":"Get input from user"},{"location":"processing/setup/#3d-drawing","text":"Processing also support 3D drawing, to use 3D, you need to setup canvas to \"3D\" model by passing P3D as the 3rd parameter in size function: from processing import * rotating = 0.01 def setup(): size(400, 400, P3D) def draw(): global rotating background(0, 0, 0) translate(200, 100, 0) rotateY(rotating) rotating += 0.01 if rotating = PI: rotating = 0.01 fill(255, 0, 0) box(40) run() To check more functions about Processing library, check all functions under Processing Graphic on the left.","title":"3D drawing"},{"location":"processing/shape/","text":"Shape 2D Primitives arc() ellipse() line() point() quad() rect() triangle() Curves bezier() bezierDetail() bezierPoint() bezierTangent() curve() curveDetail() curvePoint() curveTangent() curveTightness() 3D Primitives box() sphere() sphereDetail() Attributes ellipseMode() noSmooth() rectMode() smooth() strokeCap() strokeJoin() strokeWeight() Vertex beginShape() bezierVertex() curveVertex() endShape() texture() textureMode() vertex() Loading Displaying loadShape() shape() shapeMode() Example from processing import * def setup(): size(400, 400) background(0, 0, 0) def draw(): fill(0, 0, 255) ellipse(56, 46, 55, 55) fill(255, 0, 0) triangle(130, 175, 158, 120, 186, 175) run() Reference Processing.org","title":"Shape"},{"location":"processing/shape/#shape","text":"","title":"Shape"},{"location":"processing/shape/#2d-primitives","text":"arc() ellipse() line() point() quad() rect() triangle()","title":"2D Primitives"},{"location":"processing/shape/#curves","text":"bezier() bezierDetail() bezierPoint() bezierTangent() curve() curveDetail() curvePoint() curveTangent() curveTightness()","title":"Curves"},{"location":"processing/shape/#3d-primitives","text":"box() sphere() sphereDetail()","title":"3D Primitives"},{"location":"processing/shape/#attributes","text":"ellipseMode() noSmooth() rectMode() smooth() strokeCap() strokeJoin() strokeWeight()","title":"Attributes"},{"location":"processing/shape/#vertex","text":"beginShape() bezierVertex() curveVertex() endShape() texture() textureMode() vertex()","title":"Vertex"},{"location":"processing/shape/#loading-displaying","text":"loadShape() shape() shapeMode()","title":"Loading &amp; Displaying"},{"location":"processing/shape/#example","text":"from processing import * def setup(): size(400, 400) background(0, 0, 0) def draw(): fill(0, 0, 255) ellipse(56, 46, 55, 55) fill(255, 0, 0) triangle(130, 175, 158, 120, 186, 175) run()","title":"Example"},{"location":"processing/shape/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/transform/","text":"Transform applyMatrix() popMatrix() pushMatrix() resetMatrix() rotate() rotateX() rotateY() rotateZ() scale() translate() Example from processing import * import math rotate = PI/6 def setup(): size(400, 400, P3D) def draw(): global rotate background(180) noFill() translate(150, 150, 0) rotate += 0.01 if rotate = TWO_PI: rotate = 0 rotateY(rotate) stroke(153) box(35) # Set rotation angles ct = math.cos(PI/9.0) st = math.sin(PI/9.0) # Matrix for rotation around the Y axis applyMatrix( ct, 0.0, st, 0.0, 0.0, 1.0, 0.0, 0.0, -st, 0.0, ct, 0.0, 0.0, 0.0, 0.0, 1.0) stroke(255) box(50) run() Reference Processing.org Processing applyMatrix","title":"Transform"},{"location":"processing/transform/#transform","text":"applyMatrix() popMatrix() pushMatrix() resetMatrix() rotate() rotateX() rotateY() rotateZ() scale() translate()","title":"Transform"},{"location":"processing/transform/#example","text":"from processing import * import math rotate = PI/6 def setup(): size(400, 400, P3D) def draw(): global rotate background(180) noFill() translate(150, 150, 0) rotate += 0.01 if rotate = TWO_PI: rotate = 0 rotateY(rotate) stroke(153) box(35) # Set rotation angles ct = math.cos(PI/9.0) st = math.sin(PI/9.0) # Matrix for rotation around the Y axis applyMatrix( ct, 0.0, st, 0.0, 0.0, 1.0, 0.0, 0.0, -st, 0.0, ct, 0.0, 0.0, 0.0, 0.0, 1.0) stroke(255) box(50) run()","title":"Example"},{"location":"processing/transform/#reference","text":"Processing.org Processing applyMatrix","title":"Reference"},{"location":"processing/typography/","text":"Typography PFont Loading Displaying createFont() text() textFont() Attributes textAlign() textLeading() textMode() textSize() textWidth() Metrics textAscent() textDescent() Example from processing import * myFont = None def setup(): global myFont size(400, 400) background(0) myFont = createFont( Georgia , 32); def draw(): fill(255, 255, 255) textFont(myFont) textAlign(LEFT) text( Hello World , 100, 200) fill(255, 0, 0) textSize(30) text( Start Game , 100, 300) run() Reference Processing.org","title":"Typography"},{"location":"processing/typography/#typography","text":"PFont","title":"Typography"},{"location":"processing/typography/#loading-displaying","text":"createFont() text() textFont()","title":"Loading &amp; Displaying"},{"location":"processing/typography/#attributes","text":"textAlign() textLeading() textMode() textSize() textWidth()","title":"Attributes"},{"location":"processing/typography/#metrics","text":"textAscent() textDescent()","title":"Metrics"},{"location":"processing/typography/#example","text":"from processing import * myFont = None def setup(): global myFont size(400, 400) background(0) myFont = createFont( Georgia , 32); def draw(): fill(255, 255, 255) textFont(myFont) textAlign(LEFT) text( Hello World , 100, 200) fill(255, 0, 0) textSize(30) text( Start Game , 100, 300) run()","title":"Example"},{"location":"processing/typography/#reference","text":"Processing.org","title":"Reference"},{"location":"processing/web/","text":"Web link(url[, target=None]) : open a web page in target window, if target is missing, web page will be opened in current window; if target equals _new , web page will be opened in a new window/tab. Example from processing import * def keyPressed(): # key o is pressed # open a web page load oyoclass.com if keyboard.keyCode == 79: link( https://oyoclass.com , _new ) run() Reference Processing link","title":"Web & Link"},{"location":"processing/web/#web","text":"link(url[, target=None]) : open a web page in target window, if target is missing, web page will be opened in current window; if target equals _new , web page will be opened in a new window/tab.","title":"Web"},{"location":"processing/web/#example","text":"from processing import * def keyPressed(): # key o is pressed # open a web page load oyoclass.com if keyboard.keyCode == 79: link( https://oyoclass.com , _new ) run()","title":"Example"},{"location":"processing/web/#reference","text":"Processing link","title":"Reference"},{"location":"stdmod/collections/","text":"collections \u2014 High-performance container datatypes This module implements the following specialized container datatypes: Objects namedtuple : factory function for creating tuple subclasses with named fields Counter : dict subclass for counting hashable objects OrderedDict : dict subclass that remembers the order entries were added defaultdict : dict subclass that calls a factory function to supply missing values For more information and how to use those objects, check Python Collections Module documentation . Example import collections c = collections.Counter('gallahad') print c[ a ] # 3 print c.most_common(1) # [('a', 3)] Point = collections.namedtuple('Point', ['x', 'y']) p = Point(1,2) print p.x # 1 print p.y # 2","title":"collections"},{"location":"stdmod/collections/#collections-high-performance-container-datatypes","text":"This module implements the following specialized container datatypes:","title":"collections \u2014 High-performance container datatypes"},{"location":"stdmod/collections/#objects","text":"namedtuple : factory function for creating tuple subclasses with named fields Counter : dict subclass for counting hashable objects OrderedDict : dict subclass that remembers the order entries were added defaultdict : dict subclass that calls a factory function to supply missing values For more information and how to use those objects, check Python Collections Module documentation .","title":"Objects"},{"location":"stdmod/collections/#example","text":"import collections c = collections.Counter('gallahad') print c[ a ] # 3 print c.most_common(1) # [('a', 3)] Point = collections.namedtuple('Point', ['x', 'y']) p = Point(1,2) print p.x # 1 print p.y # 2","title":"Example"},{"location":"stdmod/json/","text":"json JSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax. Functions json.dumps(object) : Serialize obj to a JSON formatted string json.loads(string) : Deserialize a string to a Python object Example import json student = { name : Nick , grade : 5 } # s is a string s = json.dumps(student) print s # o is an object o = json.loads(s) print o[ name ]","title":"json"},{"location":"stdmod/json/#json","text":"JSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax.","title":"json"},{"location":"stdmod/json/#functions","text":"json.dumps(object) : Serialize obj to a JSON formatted string json.loads(string) : Deserialize a string to a Python object","title":"Functions"},{"location":"stdmod/json/#example","text":"import json student = { name : Nick , grade : 5 } # s is a string s = json.dumps(student) print s # o is an object o = json.loads(s) print o[ name ]","title":"Example"},{"location":"stdmod/math/","text":"math \u2014 Mathematical functions This module contains some mathematical operations (subset of Python's standard math module), to use it, make sure use import math first to import it. Constants math.e : The mathematical constant e = 2.718281..., to available precision math.pi : The mathematical constant \u03c0 = 3.141592..., to available precision. Functions math.acos(x) : Return the arc cosine of x, in radians. math.acosh(x) : Return the inverse hyperbolic cosine of x. math.asin(x) : Return the arc sine of x, in radians. math.asinh(x) : Return the inverse hyperbolic sine of x. math.atan(x) : Return the arc tangent of x, in radians. math.atan2(y, x) : Return atan(y / x), in radians. The result is between -pi and pi. math.atanh(x) : Return the inverse hyperbolic tangent of x. math.ceil(x) : Return the ceiling of x as a float, the smallest integer value greater than or equal to x. math.copysign(x, y) : Return x with the sign of y. On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0. math.cos(x) : Return the cosine of x radians. math.cosh(x) : Return the hyperbolic cosine of x. math.degrees(x) : Convert angle x from radians to degrees. math.exp(x) : Return e**x. math.fabs(x) : Return the absolute value of x. math.factorial(x) : Return x factorial. math.floor(x) : Return the floor of x as a float, the largest integer value less than or equal to x. math.hypot(x, y) : Return the Euclidean norm, sqrt(x x + y y). This is the length of the vector from the origin to point (x, y). math.log(x[,base]) : With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base). math.log10(x) : Return the base-10 logarithm of x. This is usually more accurate than log(x, 10). math.pow(x, y) : Return x raised to the power y. math.radians : Convert angle x from degrees to radians. math.sin(x) : Return the sine of x radians. math.sinh(x) : Return the hyperbolic sine of x. math.sqrt(x) : Return the square root of x. math.tan(x) : Return the tangent of x radians. math.tanh(x) : Return the hyperbolic tangent of x. math.trunc(x) : Return the Real value x truncated to an Integral (usually a long integer). Example import math print math.pi # 3.14159265359 print math.sqrt(4) # 2.0 print math.sin(math.pi/6) # 0.5 print math.degrees(math.pi/6) # 30.0 Reference Python Math Module, python.org","title":"math"},{"location":"stdmod/math/#math-mathematical-functions","text":"This module contains some mathematical operations (subset of Python's standard math module), to use it, make sure use import math first to import it.","title":"math \u2014 Mathematical functions"},{"location":"stdmod/math/#constants","text":"math.e : The mathematical constant e = 2.718281..., to available precision math.pi : The mathematical constant \u03c0 = 3.141592..., to available precision.","title":"Constants"},{"location":"stdmod/math/#functions","text":"math.acos(x) : Return the arc cosine of x, in radians. math.acosh(x) : Return the inverse hyperbolic cosine of x. math.asin(x) : Return the arc sine of x, in radians. math.asinh(x) : Return the inverse hyperbolic sine of x. math.atan(x) : Return the arc tangent of x, in radians. math.atan2(y, x) : Return atan(y / x), in radians. The result is between -pi and pi. math.atanh(x) : Return the inverse hyperbolic tangent of x. math.ceil(x) : Return the ceiling of x as a float, the smallest integer value greater than or equal to x. math.copysign(x, y) : Return x with the sign of y. On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0. math.cos(x) : Return the cosine of x radians. math.cosh(x) : Return the hyperbolic cosine of x. math.degrees(x) : Convert angle x from radians to degrees. math.exp(x) : Return e**x. math.fabs(x) : Return the absolute value of x. math.factorial(x) : Return x factorial. math.floor(x) : Return the floor of x as a float, the largest integer value less than or equal to x. math.hypot(x, y) : Return the Euclidean norm, sqrt(x x + y y). This is the length of the vector from the origin to point (x, y). math.log(x[,base]) : With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base). math.log10(x) : Return the base-10 logarithm of x. This is usually more accurate than log(x, 10). math.pow(x, y) : Return x raised to the power y. math.radians : Convert angle x from degrees to radians. math.sin(x) : Return the sine of x radians. math.sinh(x) : Return the hyperbolic sine of x. math.sqrt(x) : Return the square root of x. math.tan(x) : Return the tangent of x radians. math.tanh(x) : Return the hyperbolic tangent of x. math.trunc(x) : Return the Real value x truncated to an Integral (usually a long integer).","title":"Functions"},{"location":"stdmod/math/#example","text":"import math print math.pi # 3.14159265359 print math.sqrt(4) # 2.0 print math.sin(math.pi/6) # 0.5 print math.degrees(math.pi/6) # 30.0","title":"Example"},{"location":"stdmod/math/#reference","text":"Python Math Module, python.org","title":"Reference"},{"location":"stdmod/operator/","text":"operator \u2014 Standard operators as functions The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python. Functions operator.abs operator.add operator.and_ operator.concat operator.contains operator.countOf operator.delitem operator.div operator.divmod operator.eq operator.floordiv operator.ge operator.getitem operator.gt operator.index operator.indexOf operator.inv operator.invert operator.is_ operator.is_not operator.le operator.lshift operator.lt operator.mod operator.mul operator.ne operator.neg operator.not_ operator.or_ operator.pos operator.pow operator.rshift operator.setitem operator.sub operator.truediv operator.truth operator.xor For more information on how to use those functions, please check Python's official documentation at operator module - docs.python.org . Example import operator print operator.lt(1, 2) # True print operator.truth(0) # False print operator.truth([]) # False print operator.truth(2) # True print operator.countOf( hello world , l ) # 3 Reference operator module - docs.python.org","title":"operator"},{"location":"stdmod/operator/#operator-standard-operators-as-functions","text":"The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python.","title":"operator \u2014 Standard operators as functions"},{"location":"stdmod/operator/#functions","text":"operator.abs operator.add operator.and_ operator.concat operator.contains operator.countOf operator.delitem operator.div operator.divmod operator.eq operator.floordiv operator.ge operator.getitem operator.gt operator.index operator.indexOf operator.inv operator.invert operator.is_ operator.is_not operator.le operator.lshift operator.lt operator.mod operator.mul operator.ne operator.neg operator.not_ operator.or_ operator.pos operator.pow operator.rshift operator.setitem operator.sub operator.truediv operator.truth operator.xor For more information on how to use those functions, please check Python's official documentation at operator module - docs.python.org .","title":"Functions"},{"location":"stdmod/operator/#example","text":"import operator print operator.lt(1, 2) # True print operator.truth(0) # False print operator.truth([]) # False print operator.truth(2) # True print operator.countOf( hello world , l ) # 3","title":"Example"},{"location":"stdmod/operator/#reference","text":"operator module - docs.python.org","title":"Reference"},{"location":"stdmod/random/","text":"random \u2014 Generate pseudo-random numbers This module implements a subset of Python standard random module, it contains pseudo-random number generators for various distributions. To use it, make sure include import random first. Functions random.choice(seq) : Return a random element from the non-empty sequence seq. random.randint(a, b) : Return a random integer N such that a = N = b random.random : Return the next random floating point number in the range [0.0, 1.0). random.randrange(stop) : See below. random.randrange(start, stop[, step]) : Return a randomly selected element from range(start, stop, step) . This is equivalent to choice(range(start, stop, step)) . random.sample(population, k) : Return a k length list of unique elements chosen from the population sequence. random.seed(x) : Initialize the basic random number generator. random.shuffle(x) : Shuffle the sequence x in place. random.triangular(low, high, mode) : Return a random floating point number N such that low = N = high and with the specified mode between those bounds. random.uniform(a, b) : Return a random floating point number N such that a = N = b for a = b and b = N = a for b a. Example import random lst = [1, 2, 3, 4, 5] print random.choice(lst) print random.randint(1, 10) print random.random() random.shuffle(lst) print lst print random.sample(range(100), 10) Reference random module - docs.python.org","title":"random"},{"location":"stdmod/random/#random-generate-pseudo-random-numbers","text":"This module implements a subset of Python standard random module, it contains pseudo-random number generators for various distributions. To use it, make sure include import random first.","title":"random \u2014 Generate pseudo-random numbers"},{"location":"stdmod/random/#functions","text":"random.choice(seq) : Return a random element from the non-empty sequence seq. random.randint(a, b) : Return a random integer N such that a = N = b random.random : Return the next random floating point number in the range [0.0, 1.0). random.randrange(stop) : See below. random.randrange(start, stop[, step]) : Return a randomly selected element from range(start, stop, step) . This is equivalent to choice(range(start, stop, step)) . random.sample(population, k) : Return a k length list of unique elements chosen from the population sequence. random.seed(x) : Initialize the basic random number generator. random.shuffle(x) : Shuffle the sequence x in place. random.triangular(low, high, mode) : Return a random floating point number N such that low = N = high and with the specified mode between those bounds. random.uniform(a, b) : Return a random floating point number N such that a = N = b for a = b and b = N = a for b a.","title":"Functions"},{"location":"stdmod/random/#example","text":"import random lst = [1, 2, 3, 4, 5] print random.choice(lst) print random.randint(1, 10) print random.random() random.shuffle(lst) print lst print random.sample(range(100), 10)","title":"Example"},{"location":"stdmod/random/#reference","text":"random module - docs.python.org","title":"Reference"},{"location":"stdmod/regexp/","text":"re \u2014 Regular expression operations This module provides regular expression matching operations. Constants re.I or re.IGNORECASE : Perform case-insensitive matching re.M or re.MULTILINE : When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). Functions re.findall re.match re.search re.split Class re.MatchObject : match object support methods group and groups For more information on how to use above attributes and methods, check Python's official documentation at re module - docs.python.org Example import re m = re.match(r (\\w+) (\\w+) , Isaac Newton, physicist ) print m.group(0) # Isaac Newton print m.group(1) # Isaac print m.group(2) # Newton Reference re module - docs.python.org","title":"re"},{"location":"stdmod/regexp/#re-regular-expression-operations","text":"This module provides regular expression matching operations.","title":"re \u2014 Regular expression operations"},{"location":"stdmod/regexp/#constants","text":"re.I or re.IGNORECASE : Perform case-insensitive matching re.M or re.MULTILINE : When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).","title":"Constants"},{"location":"stdmod/regexp/#functions","text":"re.findall re.match re.search re.split","title":"Functions"},{"location":"stdmod/regexp/#class","text":"re.MatchObject : match object support methods group and groups For more information on how to use above attributes and methods, check Python's official documentation at re module - docs.python.org","title":"Class"},{"location":"stdmod/regexp/#example","text":"import re m = re.match(r (\\w+) (\\w+) , Isaac Newton, physicist ) print m.group(0) # Isaac Newton print m.group(1) # Isaac print m.group(2) # Newton","title":"Example"},{"location":"stdmod/regexp/#reference","text":"re module - docs.python.org","title":"Reference"},{"location":"stdmod/string/","text":"string - Common string operations The string module contains a number of useful constants and functions. Constants string.ascii_letters : The concatenation of the ascii_lowercase and ascii_uppercase constants described below. string.ascii_lowercase : The lowercase letters abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change. string.ascii_uppercase : The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change. string.digits : The string 0123456789 . string.hexdigits : The string 0123456789abcdefABCDEF . string.letters : The concatenation of the strings lowercase and uppercase described below. string.lowercase : A string containing all the characters that are considered lowercase letters, abcdefghijklmnopqrstuvwxyz . string.octdigits : The string 01234567 . string.punctuation : String of ASCII characters which are considered punctuation characters. string.printable : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace. string.uppercase : A string containing all the characters that are considered uppercase letters, ABCDEFGHIJKLMNOPQRSTUVWXYZ . string.whitespace : A string containing all characters that are considered whitespace. Functions string.capitalize(word) : Return a copy of word with only its first character capitalized. string.capwords(s[, sep]) : Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). string.join(words[, sep]) : Concatenate a list or tuple of words with intervening occurrences of sep. string.split(s[, sep[, maxsplit]]) : Return a list of the words of the string s. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator. Example import string print string.ascii_letters # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print string.ascii_lowercase # abcdefghijklmnopqrstuvwxyz print string.punctuation # ! #$% '()*+,-./:; = ?@[\\]^_`{|}~ s = hello world print string.capwords(s) # Hello World print string.capitalize(s) # Hello world words = [ i , love , pizza ] print string.join(words, * ) # i*love*pizza Reference string module, docs.python.org","title":"string"},{"location":"stdmod/string/#string-common-string-operations","text":"The string module contains a number of useful constants and functions.","title":"string - Common string operations"},{"location":"stdmod/string/#constants","text":"string.ascii_letters : The concatenation of the ascii_lowercase and ascii_uppercase constants described below. string.ascii_lowercase : The lowercase letters abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change. string.ascii_uppercase : The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change. string.digits : The string 0123456789 . string.hexdigits : The string 0123456789abcdefABCDEF . string.letters : The concatenation of the strings lowercase and uppercase described below. string.lowercase : A string containing all the characters that are considered lowercase letters, abcdefghijklmnopqrstuvwxyz . string.octdigits : The string 01234567 . string.punctuation : String of ASCII characters which are considered punctuation characters. string.printable : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace. string.uppercase : A string containing all the characters that are considered uppercase letters, ABCDEFGHIJKLMNOPQRSTUVWXYZ . string.whitespace : A string containing all characters that are considered whitespace.","title":"Constants"},{"location":"stdmod/string/#functions","text":"string.capitalize(word) : Return a copy of word with only its first character capitalized. string.capwords(s[, sep]) : Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). string.join(words[, sep]) : Concatenate a list or tuple of words with intervening occurrences of sep. string.split(s[, sep[, maxsplit]]) : Return a list of the words of the string s. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator.","title":"Functions"},{"location":"stdmod/string/#example","text":"import string print string.ascii_letters # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print string.ascii_lowercase # abcdefghijklmnopqrstuvwxyz print string.punctuation # ! #$% '()*+,-./:; = ?@[\\]^_`{|}~ s = hello world print string.capwords(s) # Hello World print string.capitalize(s) # Hello world words = [ i , love , pizza ] print string.join(words, * ) # i*love*pizza","title":"Example"},{"location":"stdmod/string/#reference","text":"string module, docs.python.org","title":"Reference"},{"location":"stdmod/time/","text":"time \u2014 Time access This module provides time-related functions. Attribute time.altzone : The offset of the local DST timezone, in seconds west of UTC. time.daylight : Nonzero if a DST timezone is defined. time.timezone : The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). time.tzname : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. Functions time.asctime([t]) : Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. time.clock() : Return the current processor time as a floating point number expressed in seconds. time.ctime([secs]) : Convert a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None, the current time as returned by time() is used. time.gmtime([secs]) : Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None, the current time as returned by time() is used. time.localtime([secs]) : Like gmtime() but converts to local time. If secs is not provided or None, the current time as returned by time() is used. time.mktime(t) : This is the inverse function of localtime(). Its argument is the struct_time or full 9-tuple. time.sleep(secs) : Suspend execution of the current thread for the given number of seconds. time.time() : Return the time in seconds since the epoch as a floating point number. Class time.struct_time : The type of the time value sequence returned by gmtime(), localtime(). For more information, check time module on Python official documentation . Example import time print time.timezone print time.altzone print time.ctime() print time.clock() print time.localtime() print time.gmtime() print time.tzname # print out time every 1 second for i in range(10): print time.asctime() time.sleep(1) Reference time module - docs.python.org","title":"time"},{"location":"stdmod/time/#time-time-access","text":"This module provides time-related functions.","title":"time \u2014 Time access"},{"location":"stdmod/time/#attribute","text":"time.altzone : The offset of the local DST timezone, in seconds west of UTC. time.daylight : Nonzero if a DST timezone is defined. time.timezone : The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). time.tzname : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.","title":"Attribute"},{"location":"stdmod/time/#functions","text":"time.asctime([t]) : Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. time.clock() : Return the current processor time as a floating point number expressed in seconds. time.ctime([secs]) : Convert a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None, the current time as returned by time() is used. time.gmtime([secs]) : Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None, the current time as returned by time() is used. time.localtime([secs]) : Like gmtime() but converts to local time. If secs is not provided or None, the current time as returned by time() is used. time.mktime(t) : This is the inverse function of localtime(). Its argument is the struct_time or full 9-tuple. time.sleep(secs) : Suspend execution of the current thread for the given number of seconds. time.time() : Return the time in seconds since the epoch as a floating point number.","title":"Functions"},{"location":"stdmod/time/#class","text":"time.struct_time : The type of the time value sequence returned by gmtime(), localtime(). For more information, check time module on Python official documentation .","title":"Class"},{"location":"stdmod/time/#example","text":"import time print time.timezone print time.altzone print time.ctime() print time.clock() print time.localtime() print time.gmtime() print time.tzname # print out time every 1 second for i in range(10): print time.asctime() time.sleep(1)","title":"Example"},{"location":"stdmod/time/#reference","text":"time module - docs.python.org","title":"Reference"},{"location":"turtle/turtle/","text":"turtle \u2014 Turtle graphics Turtle graphic implements a subset functions of the Python Turtle Module . Setup from turtle import Turtle # Generate Turtle object, name it like your pet nick = Turtle() Now you have your own turtle (in this example I called it nick , but you can change it), there are several functions you can use to control your turtle. Move and draw turtle.forward(distance) or turtle.fd(distance) : Move the turtle forward by distance , in the direction the turtle is headed. turtle.backward(distance) or turtle.back(distance) or turtle.bk(distance) : Move the turtle backward by distance , opposite to the direction the turtle is headed. This function doesn't change turtle's heading. turtle.right(angle) or turtle.rt(angle) : Turn turtle right by angle units. turtle.left(angle) or turtle.lt(angle) : Turn turtle left by angle units. turtle.goto(x, y) : Move turtle to an absolute position. If the pen is down, draw line. turtle.setposition(x, y) or turtle.setpos(x, y) : Move turtle to an absolute position without drawing the line. ( Notice: this one is different with Python's official turtle module documentation, in which setposition is the same as goto ). turtle.setworldcoordinates(llx, lly, urx, ury) : Set up user-defined coordinate system and switch to mode \u201cworld\u201d if necessary. turtle.setx(x) : Set the turtle\u2019s first coordinate to x, leave second coordinate unchanged. turtle.sety(y) : Set the turtle\u2019s second coordinate to y, leave first coordinate unchanged. turtle.setheading(dir) or turtle.seth(dir) : Set the orientation of the turtle to dir . 0 is east, 90 is north, 180 is west, 270 is south, etc. turtle.home() : Move turtle to the origin \u2013 coordinates (0,0) \u2013 and set its heading to its start-orientation. turtle.circle(radius, extent=None) : Draw a circle with given radius. The center is radius units left of the turtle; extent \u2013 an angle \u2013 determines which part of the circle is drawn. If extent is not given, draw the entire circle. turtle.dot(size, color=None) : Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used. turtle.stamp() : Stamp a copy of the turtle shape onto the canvas at the current turtle position. turtle.speed(number=None) : Set the turtle\u2019s speed to an integer value in the range 0..10. If no argument is given, return current speed. If speed number is set to 0 or less than 0 or greater than 10, speed will be set to 0, which is fastest and no animation takes place. 1 is slowest, 3 is slow, 6 is normal, 10 is fast. By default, its speed is 6. Appearance turtle.shape(name) : Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape's name could be one of followings: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\". Tell Turtle's State turtle.position() or turtle.pos() : Return the turtle\u2019s current location (x, y) turtle.towards(x, y) : Return the angle between the line from turtle position to position specified by (x, y), the vector or the other turtle. turtle.xcor() : Return the turtle\u2019s x coordinate. turtle.ycor() : Return the turtle\u2019s y coordinate. turtle.heading() : Return the turtle\u2019s current heading. turtle.distance(x, y) : Return the distance from the turtle to (x, y) Pen control turtle.pendown() or turtle.pd() or turtle.down() : Pull the pen down \u2013 drawing when moving. turtle.penup() or turtle.pu() or turtle.up() : Pull the pen up \u2013 no drawing when moving. turtle.pensize(number) or turtle.width(number) : Set the line thickness to width or return it. turtle.isdown() : Return True if pen is down, False if it\u2019s up. Color control turtle.pencolor(*args) : Return or set the pencolor. pencolor() returns current pen color, pencolor(colorstring) , e.g. pencolor(\"red\") , pencolor(\"#FF9900\") or pencolor(r, g, b) will set pencolor to a RGB color. turtle.fillcolor(*args) : Return or set the fillcolor. fillcolor() returns current fill color. fillcolor(colorstring) or fillcolor(r, g, b) set fillcolor to a RGB color. turtle.color(*args) : Return or set pencolor and fillcolor. color() returns the current pencolor and the current fillcolor, color(colorstring) or color(r, g, b) set pencolor and fillcolor the a RGB color. Filling turtle.fill(flag) : Call fill(True) before drawing the shape you want to fill, and fill(False) when done. turtle.begin_fill() : Call just before drawing a shape to be filled. Equivalent to fill(True) . turtle.end_fill() : Fill the shape drawn after the last call to begin_fill(). Equivalent to fill(False) . Visibility turtle.showturtle() or turtle.st() : Make the turtle visible. turtle.hideturtle() or turtle.ht() : Make the turtle invisible. turtle.isvisible() : Return True if the Turtle is shown, False if it\u2019s hidden. Animation control turtle.delay(delay=None) : Set or return the drawing delay in milliseconds. turtle.tracer(n=None, delay=None) : Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed. Reset turtle.reset() : Delete the turtle\u2019s drawings from the screen, re-center the turtle and set variables to the default values. turtle.clear() : Delete the turtle\u2019s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected. Examples Draw line and circle from turtle import Turtle nick = Turtle() # move forward 100 steps nick.forward(100) # draw a circle with radius 40 nick.circle(40) # change pencolor nick.pencolor( red ) # draw a semi-circle nick.circle(40, 180) Draw square from turtle import Turtle nick = Turtle() nick.forward(100) nick.right(90) nick.forward(100) nick.right(90) nick.forward(100) nick.right(90) nick.forward(100) nick.right(90) Draw square with loop from turtle import Turtle nick = Turtle() for counter in range(4): nick.forward(100) nick.right(90) Fill square with color from turtle import Turtle nick = Turtle() # draw a square fill with red color nick.color( red ) nick.begin_fill() for counter in range(4): nick.forward(100) nick.right(90) nick.end_fill() Reference turtle library - docs.python.org","title":"turtle"},{"location":"turtle/turtle/#turtle-turtle-graphics","text":"Turtle graphic implements a subset functions of the Python Turtle Module .","title":"turtle \u2014 Turtle graphics"},{"location":"turtle/turtle/#setup","text":"from turtle import Turtle # Generate Turtle object, name it like your pet nick = Turtle() Now you have your own turtle (in this example I called it nick , but you can change it), there are several functions you can use to control your turtle.","title":"Setup"},{"location":"turtle/turtle/#move-and-draw","text":"turtle.forward(distance) or turtle.fd(distance) : Move the turtle forward by distance , in the direction the turtle is headed. turtle.backward(distance) or turtle.back(distance) or turtle.bk(distance) : Move the turtle backward by distance , opposite to the direction the turtle is headed. This function doesn't change turtle's heading. turtle.right(angle) or turtle.rt(angle) : Turn turtle right by angle units. turtle.left(angle) or turtle.lt(angle) : Turn turtle left by angle units. turtle.goto(x, y) : Move turtle to an absolute position. If the pen is down, draw line. turtle.setposition(x, y) or turtle.setpos(x, y) : Move turtle to an absolute position without drawing the line. ( Notice: this one is different with Python's official turtle module documentation, in which setposition is the same as goto ). turtle.setworldcoordinates(llx, lly, urx, ury) : Set up user-defined coordinate system and switch to mode \u201cworld\u201d if necessary. turtle.setx(x) : Set the turtle\u2019s first coordinate to x, leave second coordinate unchanged. turtle.sety(y) : Set the turtle\u2019s second coordinate to y, leave first coordinate unchanged. turtle.setheading(dir) or turtle.seth(dir) : Set the orientation of the turtle to dir . 0 is east, 90 is north, 180 is west, 270 is south, etc. turtle.home() : Move turtle to the origin \u2013 coordinates (0,0) \u2013 and set its heading to its start-orientation. turtle.circle(radius, extent=None) : Draw a circle with given radius. The center is radius units left of the turtle; extent \u2013 an angle \u2013 determines which part of the circle is drawn. If extent is not given, draw the entire circle. turtle.dot(size, color=None) : Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used. turtle.stamp() : Stamp a copy of the turtle shape onto the canvas at the current turtle position. turtle.speed(number=None) : Set the turtle\u2019s speed to an integer value in the range 0..10. If no argument is given, return current speed. If speed number is set to 0 or less than 0 or greater than 10, speed will be set to 0, which is fastest and no animation takes place. 1 is slowest, 3 is slow, 6 is normal, 10 is fast. By default, its speed is 6.","title":"Move and draw"},{"location":"turtle/turtle/#appearance","text":"turtle.shape(name) : Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape's name could be one of followings: \"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".","title":"Appearance"},{"location":"turtle/turtle/#tell-turtles-state","text":"turtle.position() or turtle.pos() : Return the turtle\u2019s current location (x, y) turtle.towards(x, y) : Return the angle between the line from turtle position to position specified by (x, y), the vector or the other turtle. turtle.xcor() : Return the turtle\u2019s x coordinate. turtle.ycor() : Return the turtle\u2019s y coordinate. turtle.heading() : Return the turtle\u2019s current heading. turtle.distance(x, y) : Return the distance from the turtle to (x, y)","title":"Tell Turtle's State"},{"location":"turtle/turtle/#pen-control","text":"turtle.pendown() or turtle.pd() or turtle.down() : Pull the pen down \u2013 drawing when moving. turtle.penup() or turtle.pu() or turtle.up() : Pull the pen up \u2013 no drawing when moving. turtle.pensize(number) or turtle.width(number) : Set the line thickness to width or return it. turtle.isdown() : Return True if pen is down, False if it\u2019s up.","title":"Pen control"},{"location":"turtle/turtle/#color-control","text":"turtle.pencolor(*args) : Return or set the pencolor. pencolor() returns current pen color, pencolor(colorstring) , e.g. pencolor(\"red\") , pencolor(\"#FF9900\") or pencolor(r, g, b) will set pencolor to a RGB color. turtle.fillcolor(*args) : Return or set the fillcolor. fillcolor() returns current fill color. fillcolor(colorstring) or fillcolor(r, g, b) set fillcolor to a RGB color. turtle.color(*args) : Return or set pencolor and fillcolor. color() returns the current pencolor and the current fillcolor, color(colorstring) or color(r, g, b) set pencolor and fillcolor the a RGB color.","title":"Color control"},{"location":"turtle/turtle/#filling","text":"turtle.fill(flag) : Call fill(True) before drawing the shape you want to fill, and fill(False) when done. turtle.begin_fill() : Call just before drawing a shape to be filled. Equivalent to fill(True) . turtle.end_fill() : Fill the shape drawn after the last call to begin_fill(). Equivalent to fill(False) .","title":"Filling"},{"location":"turtle/turtle/#visibility","text":"turtle.showturtle() or turtle.st() : Make the turtle visible. turtle.hideturtle() or turtle.ht() : Make the turtle invisible. turtle.isvisible() : Return True if the Turtle is shown, False if it\u2019s hidden.","title":"Visibility"},{"location":"turtle/turtle/#animation-control","text":"turtle.delay(delay=None) : Set or return the drawing delay in milliseconds. turtle.tracer(n=None, delay=None) : Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed.","title":"Animation control"},{"location":"turtle/turtle/#reset","text":"turtle.reset() : Delete the turtle\u2019s drawings from the screen, re-center the turtle and set variables to the default values. turtle.clear() : Delete the turtle\u2019s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.","title":"Reset"},{"location":"turtle/turtle/#examples","text":"Draw line and circle from turtle import Turtle nick = Turtle() # move forward 100 steps nick.forward(100) # draw a circle with radius 40 nick.circle(40) # change pencolor nick.pencolor( red ) # draw a semi-circle nick.circle(40, 180) Draw square from turtle import Turtle nick = Turtle() nick.forward(100) nick.right(90) nick.forward(100) nick.right(90) nick.forward(100) nick.right(90) nick.forward(100) nick.right(90) Draw square with loop from turtle import Turtle nick = Turtle() for counter in range(4): nick.forward(100) nick.right(90) Fill square with color from turtle import Turtle nick = Turtle() # draw a square fill with red color nick.color( red ) nick.begin_fill() for counter in range(4): nick.forward(100) nick.right(90) nick.end_fill()","title":"Examples"},{"location":"turtle/turtle/#reference","text":"turtle library - docs.python.org","title":"Reference"},{"location":"webaudio/webaudio/","text":"webaudio \u2014 Play audio Load and play audio Functions webaudio.loadAudio(sources[, autoplay=False]) : Load an audio, this will return an Audio object (see Audio class below). Parameter sources could be a string (either an url or builtin-audio's name), or a list, which contains a list of url, you may want to use list when you have different format audio, like .mp3 , .ogg , .wav . If you pass url as parameter, it must end with .mp3 or .ogg or .wav . The second parameter autoplay , if you set it to True, the audio will auto be played after loaded. webaudio.unloadAudio(audioObject) : Unload an audio object. An audio object can be generated by using the Audio class (see below). webaudio.unloadAllAudio() : Unload all loaded audios. webaudio.builtinAudios() : Print a list of builtin-audio's name. Class webaudio.Audio(sources[, autoplay=False]) : Parameter sources and autoplay are the same as loadAudio function (see above). To get an Audio object, you can call it like myAudio = Audio('http://example.com/sound.mp3', True) And an Audio object has following method: myAudio.play([loop=False]) : Play the audio. If pass True as parameter, it will loop playing. myAudio.pause() : Pause the audio. myAudio.volume() : Get the current volume number. myAudio.setVolume(volume) : Set the volume number (from 0 to 1). myAudio.unload() : Unload audio. Example import webaudio import time print Builtin Audios: , webaudio.builtinAudios() spring_weather = http://www.soundjay.com/ambient/spring-weather-1.mp3 # load spring_weather, autoplay it bgsound = webaudio.loadAudio(spring_weather, True) # load coin drop use Audio class, this is a builtin-audio coinsound = webaudio.Audio( soundeffect-coin-drop1 ) coinsound.play() # set background sound volume bgsound.setVolume(0.5) # after 5 seconds, pause it time.sleep(5) bgsound.pause() # after 5 seconds, continue playing time.sleep(5) bgsound.setVolume(1) bgsound.play() # after 5 seconds, unload the bgsound audio time.sleep(5) bgsound.unload() # unload all audio webaudio.unloadAllAudio() Royalty-free sound website reference soundjay.com - Free Sound Effects. www.bfxr.net - Make sound effect for your game. Credits Currently the builtinAudios are from soundjay.com","title":"webaudio"},{"location":"webaudio/webaudio/#webaudio-play-audio","text":"Load and play audio","title":"webaudio \u2014 Play audio"},{"location":"webaudio/webaudio/#functions","text":"webaudio.loadAudio(sources[, autoplay=False]) : Load an audio, this will return an Audio object (see Audio class below). Parameter sources could be a string (either an url or builtin-audio's name), or a list, which contains a list of url, you may want to use list when you have different format audio, like .mp3 , .ogg , .wav . If you pass url as parameter, it must end with .mp3 or .ogg or .wav . The second parameter autoplay , if you set it to True, the audio will auto be played after loaded. webaudio.unloadAudio(audioObject) : Unload an audio object. An audio object can be generated by using the Audio class (see below). webaudio.unloadAllAudio() : Unload all loaded audios. webaudio.builtinAudios() : Print a list of builtin-audio's name.","title":"Functions"},{"location":"webaudio/webaudio/#class","text":"webaudio.Audio(sources[, autoplay=False]) : Parameter sources and autoplay are the same as loadAudio function (see above). To get an Audio object, you can call it like myAudio = Audio('http://example.com/sound.mp3', True) And an Audio object has following method: myAudio.play([loop=False]) : Play the audio. If pass True as parameter, it will loop playing. myAudio.pause() : Pause the audio. myAudio.volume() : Get the current volume number. myAudio.setVolume(volume) : Set the volume number (from 0 to 1). myAudio.unload() : Unload audio.","title":"Class"},{"location":"webaudio/webaudio/#example","text":"import webaudio import time print Builtin Audios: , webaudio.builtinAudios() spring_weather = http://www.soundjay.com/ambient/spring-weather-1.mp3 # load spring_weather, autoplay it bgsound = webaudio.loadAudio(spring_weather, True) # load coin drop use Audio class, this is a builtin-audio coinsound = webaudio.Audio( soundeffect-coin-drop1 ) coinsound.play() # set background sound volume bgsound.setVolume(0.5) # after 5 seconds, pause it time.sleep(5) bgsound.pause() # after 5 seconds, continue playing time.sleep(5) bgsound.setVolume(1) bgsound.play() # after 5 seconds, unload the bgsound audio time.sleep(5) bgsound.unload() # unload all audio webaudio.unloadAllAudio()","title":"Example"},{"location":"webaudio/webaudio/#royalty-free-sound-website-reference","text":"soundjay.com - Free Sound Effects. www.bfxr.net - Make sound effect for your game.","title":"Royalty-free sound website reference"},{"location":"webaudio/webaudio/#credits","text":"Currently the builtinAudios are from soundjay.com","title":"Credits"}]}